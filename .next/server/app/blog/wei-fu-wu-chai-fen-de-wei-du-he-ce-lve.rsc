1:"$Sreact.fragment"
2:I[5651,["874","static/chunks/874-80549eca86098588.js","177","static/chunks/app/layout-f035406da26395a3.js"],"default"]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[6874,["874","static/chunks/874-80549eca86098588.js","909","static/chunks/app/blog/%5B...slug%5D/page-b420037c820534af.js"],""]
7:I[9665,[],"OutletBoundary"]
a:I[4911,[],"AsyncMetadataOutlet"]
c:I[9665,[],"ViewportBoundary"]
e:I[9665,[],"MetadataBoundary"]
10:I[6614,[],""]
:HL["/gitbook/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/gitbook/_next/static/css/443e11d9362f4e82.css","style"]
0:{"P":null,"b":"vtR8vRym_dmCF4uoCEze4","p":"/gitbook","c":["","blog","wei-fu-wu-chai-fen-de-wei-du-he-ce-lve",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","wei-fu-wu-chai-fen-de-wei-du-he-ce-lve","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/gitbook/_next/static/css/443e11d9362f4e82.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"zh-CN","children":["$","body",null,{"className":"__className_feb414","children":["$","div",null,{"className":"min-h-screen flex flex-col","children":[["$","$L2",null,{}],["$","main",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-gray-900","children":["$","div",null,{"className":"mx-auto max-w-7xl px-6 py-12 md:flex md:items-center md:justify-between lg:px-8","children":[["$","div",null,{"className":"flex justify-center space-x-6 md:order-2","children":[["$","$L5",null,{"href":"/about","className":"text-gray-400 hover:text-gray-300","children":"关于"}],["$","$L5",null,{"href":"/blog","className":"text-gray-400 hover:text-gray-300","children":"博客"}],["$","$L5",null,{"href":"/contact","className":"text-gray-400 hover:text-gray-300","children":"联系"}]]}],["$","div",null,{"className":"mt-8 md:order-1 md:mt-0","children":["$","p",null,{"className":"text-center text-xs leading-5 text-gray-400","children":"© 2024 Skyfalling Blog. All rights reserved."}]}]]}]}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","wei-fu-wu-chai-fen-de-wei-du-he-ce-lve","c"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","WbkGO9Qh3_HN-9dNCOCIAv",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$Le",null,{"children":"$Lf"}]]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
11:"$Sreact.suspense"
12:I[4911,[],"AsyncMetadata"]
f:["$","div",null,{"hidden":true,"children":["$","$11",null,{"fallback":null,"children":["$","$L12",null,{"promise":"$@13"}]}]}]
14:T13cf,
<h1>微服务拆分的维度和策略</h1><p>关于服务拆分的切入点，我们先从MartinL.Abbott所著《架构即未来》中所介绍的AKF扩展立方体出发寻找一些灵感，然后给出本文中关于服务拆分的两大维度。</p><p>1\. AKF扩展立方体</p><p>AKF扩展立方体（Scalability Cube）是一种可扩展模型，这个立方体有三个轴线，每个轴线描述扩展性的一个维度（见下图），分别是：</p><p>* X轴</p><p>代表无差别的克隆服务和数据，工作可以很均匀的分散在不同的服务实例上</p><p>* Y轴</p><p>关注应用中职责的划分，比如数据类型、交易执行类型的划分</p><p>* Z轴</p><p>关注服务和数据的优先级划分，如分地域划</p><img src="/images/books/image_26.png" alt="" /><p>以上X、Y和Z轴的划分可以概括为X 轴关注水平复制，Z 轴类似数据分区，而Y 轴则强调基于不同的业务拆分。理论上按照这三个扩展维度，可以将一个单体系统进行无限扩展。举例来说，比如用户预约挂号应用，一个集群撑不住时，分了多个集群，后来用户激增还是不够用，经过分析发现是用户和医生访问量很大，就将预约挂号应用拆成了患者服务、医生服务、支付服务等三个服务。三个服务的业务特点各不相同，独立维护，各自都可以再次按需扩展。</p><p>在上图中，Y轴就是我们所说的微服务的拆分模式，即基于不同的业务进行拆分。但在进行业务拆分过程中，我们发现业务往往与数据有较大耦合性，所以接下去我们把业务和数据结合起来对服务拆分的维度展开讨论。</p><p>2\. 业务与数据</p><p>服务拆分存在两大维度，即业务与数据。业务体现在各种功能代码中，通过确定业务的边界，并使用领域与界限上下文、领域事件等技术手段可以实现拆分。而数据的拆分则体现在如何将集中式的中心化数据转变为各个微服务各自拥有的独立数据，这部分工作同样十分具有挑战性。</p><p>关于业务和数据谁应该先拆分的问题，可以是先数据库后业务代码，也可以是先业务代码后数据库。然而在拆分中遇到的最大挑战可能会是数据层的拆分，因为在数据库中，可能会存在各种跨表连接查询、跨库连接查询以及不同业务模块的代码与数据耦合得非常紧密的场景，这会导致服务的拆分非常的困难。因此在拆分步骤上我们更多的推荐数据库先行。数据模型能否彻底分开，很大程度上决定了微服务的边界功能是否彻底划清。</p><p>服务拆分的方法需要根据系统自身的特点和运行状态，通常分为绞杀者与修缮者两种模式。</p><p>1\. 绞杀者模式</p><p>绞杀者模式（Strangler Pattern）最早由[Martin Fowler](https://www.martinfowler.com/)提出，指的是在现有系统外围将新功能用新的方式构建为新的服务的策略，通过将新功能做成微服务方式，而不是直接修改原有系统，逐步的实现对老系统替换。采用这种策略，随着时间的推移，新的服务就会逐渐“绞杀”老的系统。对于那些规模很大而又难以对现有架构进行修改的遗留系统，推荐采用绞杀者模式。</p><p>绞杀者模式的示意图如下图所示，我们可以看到随着功能演进和时间的不断推移，老的遗留系统功能被逐步削弱，而采用微服务架构的新功能越积越多，最终会形成从量变到质变的过程。绞杀者模式在具体实施过程中，所需要把握的最主要一点原则就是对于任何需要开发的功能一定要完整的采用微服务架构，对于完全独立的新功能这点比较容易把握，而对于涉及到老业务变更的新功能则需要通过重构达到这一目标。</p><img src="/images/books/image_41.png" alt="" /><p>2\. 修缮者模式</p><p>修缮者模式就如修房或修路一样，将老旧待修缮的部分进行隔离，用新的方式对其进行单独修复。修复的同时，需保证与其他部分仍能协同功能。从这种思路出发，修缮者模式更多表现为一种重构技术。修缮者模式在具体实现上可以参考Martine Fowler的BranchByAbstraction重构方法，该重构方法的示意图如下图所示。</p><img src="/images/books/image_28.png" alt="" /><p>从上图中，可以看到这种模式的实现方式可以分成三个主要步骤。</p><p>* 抽象层提取</p><p>首先通过识别内部的待拆分功能，对其增加抽象接口层，同时对原有代码进行改造，确保其同样实现该抽象层。这样在依赖关系上就添加了一个中间层。</p><p>* 抽象层实现</p><p>为抽象层提供新的实现，新的实现采用微服务方式。</p><p>* 抽象层替换</p><p>采用新的实现对原有的各个抽象层实现进行逐步替换，直至原有实现被完全废弃，从而完成新老实现方式之间的替换。</p>
6:["$","article",null,{"className":"py-24 sm:py-32","children":["$","div",null,{"className":"mx-auto max-w-3xl px-6 lg:px-8","children":["$","div",null,{"className":"xl:relative","children":["$","div",null,{"className":"mx-auto max-w-2xl","children":[["$","div",null,{"className":"text-center","children":[["$","time",null,{"dateTime":"2024-03-20","className":"text-gray-500","children":"2024年03月20日"}],["$","h1",null,{"className":"mt-6 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl","children":"微服务拆分的维度和策略"}],["$","p",null,{"className":"mt-6 text-lg leading-8 text-gray-600","children":"关于服务拆分的切入点，我们先从MartinL.Abbott所著《架构即未来》中所介绍的AKF扩展立方体出发寻找一些灵感，然后给出本文中关于服务拆分的两大维度。 1. AKF扩展立方体 AKF扩展立方体（Scalability Cube）是一种可扩展模型，这个立方体有三个轴线，每个轴线描述扩展性的一..."}],["$","div",null,{"className":"mt-6 flex justify-center gap-2","children":[["$","$L5","系统架构",{"href":"/blog/tag/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/page/1","className":"rounded-full bg-gray-100 px-3 py-1 text-sm font-medium text-gray-700 hover:bg-gray-200","children":"系统架构"}]]}]]}],["$","div",null,{"className":"mt-16 prose prose-lg prose-gray mx-auto","children":["$","div",null,{"className":"prose prose-lg prose-gray mx-auto","dangerouslySetInnerHTML":{"__html":"$14"}}]}],["$","div",null,{"className":"mt-16 flex items-center justify-between border-t border-gray-200 pt-8","children":["$","$L5",null,{"href":"/blog","className":"relative z-10 rounded-md px-4 py-2 text-sm font-semibold leading-6 text-gray-900 hover:text-blue-600 hover:bg-gray-50","children":"← 返回博客列表"}]}],["$","div",null,{"className":"mt-8 grid grid-cols-1 gap-8 border-t border-gray-200 pt-8 lg:grid-cols-2","children":[["$","div",null,{"className":"group","children":[["$","div",null,{"className":"flex items-center gap-x-3","children":["$","div",null,{"className":"text-sm text-gray-500","children":"上一篇"}]}],["$","h3",null,{"className":"mt-2 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600","children":["$","$L5",null,{"href":"/blog/cong-0-kai-shi-zuo-yi-ge-hou-tai-jia-gou","children":[["$","span",null,{"className":"absolute inset-0"}],"从0开始做一个后台项目架构"]}]}],["$","p",null,{"className":"mt-3 text-sm leading-6 text-gray-600 line-clamp-2","children":"--- layout:   title:..."}]]}],["$","div",null,{"className":"group","children":[["$","div",null,{"className":"flex items-center gap-x-3","children":["$","div",null,{"className":"text-sm text-gray-500","children":"下一篇"}]}],["$","h3",null,{"className":"mt-2 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600","children":["$","$L5",null,{"href":"/blog/guan-yu-fen-bu-shi-shi-wu-liang-jie-duan-ti-jiao-xie-yi-san-jie-ti-jiao-xie-yi","children":[["$","span",null,{"className":"absolute inset-0"}],"关于分布式事务、两阶段提交协议、三阶提交协议"]}]}],["$","p",null,{"className":"mt-3 text-sm leading-6 text-gray-600 line-clamp-2","children":"--- description: >-   随着大型网站的各种高并发访问、海量数据处理等场景越来越多，如何实现网站的高可用、易伸缩、可扩展、安全等目标就显得越来越重要。为了解决这样一系列问题，大型网站的架构也在不断发展。提高大型网站的高可用架构，不得不提的就是分布式。在分布式一致性一文中主要介绍了分..."}]]}]]}]]}]}]}]}]
9:null
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
b:{"metadata":[["$","title","0",{"children":"Skyfalling"}],["$","meta","1",{"name":"description","content":"分享技术、生活和思考的个人博客"}],["$","link","2",{"rel":"icon","href":"/favicon.svg"}]],"error":null,"digest":"$undefined"}
13:{"metadata":"$b:metadata","error":null,"digest":"$undefined"}
