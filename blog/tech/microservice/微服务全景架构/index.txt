1:"$Sreact.fragment"
2:I[10616,["874","static/chunks/874-f2e46e41114bd221.js","177","static/chunks/app/layout-c432974c723daafe.js"],"default"]
3:I[87555,[],""]
4:I[31295,[],""]
5:I[6874,["874","static/chunks/874-f2e46e41114bd221.js","968","static/chunks/968-bf93abe4de13a5fc.js","909","static/chunks/app/blog/%5B...slug%5D/page-26cc6d1a0064a78b.js"],""]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[59665,[],"MetadataBoundary"]
10:I[26614,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/0a7d53676a1eb136.css","style"]
0:{"P":null,"b":"WFCZ-IbSxhE30M2HJ5clC","p":"","c":["","blog","tech","microservice","%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A8%E6%99%AF%E6%9E%B6%E6%9E%84",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","tech/microservice/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A8%E6%99%AF%E6%9E%B6%E6%9E%84","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0a7d53676a1eb136.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"zh-CN","children":["$","body",null,{"className":"__className_f367f3","children":["$","div",null,{"className":"min-h-screen flex flex-col","children":[["$","$L2",null,{}],["$","main",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-[var(--background)]","children":["$","div",null,{"className":"mx-auto max-w-7xl px-6 py-12 md:flex md:items-center md:justify-between lg:px-8","children":[["$","div",null,{"className":"flex justify-center space-x-6 md:order-2","children":[["$","$L5",null,{"href":"/about","className":"text-gray-600 hover:text-gray-800","children":"关于"}],["$","$L5",null,{"href":"/blog","className":"text-gray-600 hover:text-gray-800","children":"博客"}],["$","$L5",null,{"href":"/contact","className":"text-gray-600 hover:text-gray-800","children":"联系"}]]}],["$","div",null,{"className":"mt-8 md:order-1 md:mt-0","children":["$","p",null,{"className":"text-center text-xs leading-5 text-gray-600","children":"© 2024 Skyfalling Blog. All rights reserved."}]}]]}]}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","tech/microservice/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A8%E6%99%AF%E6%9E%B6%E6%9E%84","c"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","YT0jhYYI7WjiIjqbuuC9Jv",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$Le",null,{"children":"$Lf"}]]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
11:"$Sreact.suspense"
12:I[74911,[],"AsyncMetadata"]
14:I[32923,["874","static/chunks/874-f2e46e41114bd221.js","968","static/chunks/968-bf93abe4de13a5fc.js","909","static/chunks/app/blog/%5B...slug%5D/page-26cc6d1a0064a78b.js"],"default"]
16:I[40780,["874","static/chunks/874-f2e46e41114bd221.js","968","static/chunks/968-bf93abe4de13a5fc.js","909","static/chunks/app/blog/%5B...slug%5D/page-26cc6d1a0064a78b.js"],"default"]
19:I[85300,["874","static/chunks/874-f2e46e41114bd221.js","968","static/chunks/968-bf93abe4de13a5fc.js","909","static/chunks/app/blog/%5B...slug%5D/page-26cc6d1a0064a78b.js"],"default"]
f:["$","div",null,{"hidden":true,"children":["$","$11",null,{"fallback":null,"children":["$","$L12",null,{"promise":"$@13"}]}]}]
15:T4f91,<h3>1 微服务优势与挑战 <a href="#scroller-1" id="scroller-1"></a></h3>
<h4>1.1 微服务的优势 <a href="#scroller-2" id="scroller-2"></a></h4>
<p><strong>1.1.1 单一职责</strong></p>
<p>微服务架构中的每个节点高度服务化，都是具有业务逻辑的，符合高内聚、低耦合原则以及单一职责原则的单元，包括数据库和数据模型；不同的服务通过“管道”的方式灵活组合，从而构建出庞大的系统。</p>
<p><strong>1.1.2 轻量级通信</strong></p>
<p>通过REST API模式或者RPC框架，事件流和消息代理的组合相互通信，实现服务间互相协作的轻量级通信机制。</p>
<p><strong>1.1.3 独立性</strong></p>
<p>在微服务架构中，每个服务都是独立的业务单元，与其他服务高度解耦，只需要改变当前服务本身，就可以完成独立的开发、测试、部署、运维。</p>
<p><strong>1.1.4 进程隔离</strong></p>
<p>在微服务架构中，应用程序由多个服务组成，每个服务都是高度自治的独立业务实体，可以运行在独立的进程中，不同的服务能非常容易地部署到不同的主机上，实现高度自治和高度隔离。进程的隔离，还能保证服务达到动态扩缩容的能力，业务高峰期自动增加服务资源以提升并发能力，业务低谷期则可自动释放服务资源以节省开销。</p>
<p><strong>1.1.5 混合技术栈和混合部署方式</strong></p>
<p>团队可以为不同的服务组件使用不同的技术栈和不同的部署方式（公有云、私有云、混合云）。</p>
<p><strong>1.1.6 简化治理</strong></p>
<p>组件可以彼此独立地进行缩放，从而减少了因必须缩放整个应用程序而产生的浪费和成本，独立的发布、服务治理。</p>
<p><strong>1.1.7 安全可靠，可维护。</strong></p>
<p>从架构上对运维提供友好的支撑，在安全、可维护的基础上规范化发布流程，支持数据存储容灾、业务模块隔离、访问权限控制、编码安全检测等。</p>
<h4>1.2 面临的挑战 <a href="#scroller-10" id="scroller-10"></a></h4>
<p><strong>1.2.1 分布式固有复杂性</strong></p>
<p>微服务架构是基于分布式的系统，而构建分布式系统必然会带来额外的开销。</p>
<ul>
<li>性能： 分布式系统是跨进程、跨网络的调用，受网络延迟和带宽的影响。</li>
<li>可靠性： 由于高度依赖于网络状况，任何一次的远程调用都有可能失败，随着服务的增多还会出现更多的潜在故障点。因此，如何提高系统的可靠性、降低因网络引起的故障率，是系统构建的一大挑战。</li>
<li>分布式通信： 分布式通信大大增加了功能实现的复杂度，并且伴随着定位难、调试难等问题。</li>
<li>数据一致性： 需要保证分布式系统的数据强一致性，即在 C（一致性）A（可用性）P（分区容错性） 三者之间做出权衡。这块可以参考我的这篇《<a href="https://www.cnblogs.com/wzh2010/p/15311142.html">分布式事务</a>》。</li>
</ul>
<p><strong>1.2.2 服务的依赖管理和测试</strong></p>
<p>在单体应用中，通常使用集成测试来验证依赖是否正常。而在微服务架构中，服务数量众多，每个服务都是独立的业务单元，服务主要通过接口进行交互，如何保证它的正常，是测试面临的主要挑战。</p>
<p>所以单元测试和单个服务链路的可用性非常重要。</p>
<p><strong>1.2.3 有效的配置版本管理</strong></p>
<p>在单体系统中，配置可以写在yaml文件，分布式系统中需要统一进行配置管理，同一个服务在不同的场景下对配置的值要求还可能不一样，所以需要引入配置的版本管理、环境管理。</p>
<p><strong>1.2.4 自动化的部署流程</strong></p>
<p>在微服务架构中，每个服务都独立部署，交付周期短且频率高，人工部署已经无法适应业务的快速变化。有效地构建自动化部署体系，配合服务网格、容器技术，是微服务面临的另一个挑战。</p>
<p><strong>1.2.5 对于DevOps更高的要求</strong></p>
<p>在微服务架构的实施过程中，开发人员和运维人员的角色发生了变化，开发者也将承担起整个服务的生命周期的责任，包括部署、链路追踪、监控；因此，按需调整组织架构、构建全功能的团队，也是一个不小的挑战。</p>
<p><strong>1.2.6 运维成本</strong></p>
<p>运维主要包括配置、部署、监控与告警和日志收集四大方面。微服务架构中，每个服务都需要独立地配置、部署、监控和收集日志，成本呈指数级增长。</p>
<p>服务化粒度越细，运维成本越高。</p>
<p>怎样去解决这些问题，是微服务架构必须面临的挑战。</p>
<h3>2 微服务全景架构 <a href="#scroller-17" id="scroller-17"></a></h3>
<p><img src="/images/blog/tech/microservice/image_1_1.png" alt="image_1_1.png"></p>
<h3>3 微服务核心组件 <a href="#scroller-19" id="scroller-19"></a></h3>
<p>微服务架构核心组件包括：</p>
<table>
<thead>
<tr>
<th><strong>组件名</strong></th>
</tr>
</thead>
<tbody><tr>
<td>服务注册与发现</td>
</tr>
<tr>
<td>API 网关服务</td>
</tr>
<tr>
<td>分布式配置中心</td>
</tr>
<tr>
<td>服务通信</td>
</tr>
<tr>
<td>服务治理</td>
</tr>
<tr>
<td>服务监控</td>
</tr>
<tr>
<td>分布式服务追踪</td>
</tr>
</tbody></table>
<h4>3.1 服务注册与发现 <a href="#scroller-20" id="scroller-20"></a></h4>
<p><strong>3.1.1 原理图</strong></p>
<p><img src="/images/blog/tech/microservice/image_1_2.png" alt="image_1_2.png"></p>
<p>服务注册与发现三要素：</p>
<ul>
<li>Provider：服务的提供方</li>
<li>Consumer：调用远程服务的服务消费方</li>
<li>Registry：服务注册和发现的注册中心</li>
</ul>
<p><strong>3.1.2 注册中心的原理、流程</strong></p>
<p>1、 Provider(服务提供者)绑定指定端口并启动服务</p>
<p>2、提供者连接注册中心，并发本机 IP、端口、应用信息和服务信息发送至注册中心存储</p>
<p>3、Consumer(消费者），连接注册中心 ，并发送应用信息、所求服务信息至注册中心</p>
<p>4、注册中心根据消费者所求服务信息匹配对应的提供者列表发送至Consumer 应用缓存。</p>
<p>5、Consumer 在发起远程调用时基于缓存的消费者列表择其一发起调用。</p>
<p>6、Provider 状态变更会实时通知注册中心、在由注册中心实时推送至Consumer设计的原因：</p>
<p>Consumer 与 Provider 解偶，双方都可以横向增减节点数。注册中心对本身可做对等集群，可动态增减节点，并且任意一台宕掉后，将自动切换到另一台</p>
<p>7、去中心化，双方不直接依赖注册中心，即使注册中心全部宕机短时间内也不会影响服务的调用（Consumer应用缓存中保留提供者 Provider 列表）</p>
<p>8、服务提供者无状态，任意一台宕掉后，不影响使用</p>
<p>注册中心包含如下功能：注册中心、服务注册和反注册、心跳监测与汇报、服务订阅、服务变更查询、集群部署、服务健康状态检测、服务状态变更通知 等</p>
<p>我们有很多种注册中心的技术，Zookeeper、Etcd、Consul、Eureka 4种比较常用，如下</p>
<table>
<thead>
<tr>
<th></th>
<th>Zookeeper</th>
<th>Etcd</th>
<th>Consul</th>
<th>Eureka</th>
</tr>
</thead>
<tbody><tr>
<td>CAP模型</td>
<td>CP</td>
<td>CP</td>
<td>CP</td>
<td>AP</td>
</tr>
<tr>
<td>数据一致性算法</td>
<td>ZAB</td>
<td>Raft</td>
<td>Raft</td>
<td>❌</td>
</tr>
<tr>
<td>多数据中心</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>多语言支持</td>
<td>客户端</td>
<td>Http/gRPC</td>
<td>Http/DNS</td>
<td>Http</td>
</tr>
<tr>
<td>Watch</td>
<td>TCP</td>
<td>Long Polling</td>
<td>Long Polling</td>
<td>Long Polling</td>
</tr>
<tr>
<td>KV存储</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>服务健康检查</td>
<td>心跳</td>
<td>心跳</td>
<td><p>服务状态，<br>内存，硬盘等</p></td>
<td>自定义</td>
</tr>
<tr>
<td>自身监控</td>
<td>❌</td>
<td>metrics</td>
<td>metrics</td>
<td>metrics</td>
</tr>
<tr>
<td>SpringCloud 支持</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>自身开发语言</td>
<td>Java</td>
<td>Go</td>
<td>Go</td>
<td>Java</td>
</tr>
</tbody></table>
<p>分布式系统中CAP模型3者不可兼得。由于网络的原因，分布式系统中P是必备的，意味着只能选择 AP 或者 CP。CP 代表数据一致性是第一位的，AP 代表可用性是第一位的。</p>
<p>Zookeeper、Etcd、Consul 是 CP 型注册中心，牺牲可用性来保证数据强一致性</p>
<p>Eureka 是 AP 型注册中心，牺牲一致性来保证可用性</p>
<h4>3.2 API 网关服务 <a href="#scroller-23" id="scroller-23"></a></h4>
<p><img src="/images/blog/tech/microservice/image_1_3.png" alt="image_1_3.png"></p>
<p>上面是Api网关服务的基本架构：用户的请求经过统一的Api网关来访问微服务里具体的服务颗粒，并且可能产生串联的链路服务调用。</p>
<p>有很多耳熟能详的API网关技术，比如 Zuul、Kong、Tyk等，提供了服务路由在内的很多通用功能，后面会有专门的章节来说这个。</p>
<p>Tyk：Tyk是一个开放源码的API网关，它是快速、可扩展和现代的。Tyk提供了一个API管理平台，其中包括API网关、API分析、开发人员门户和API管理面板。Try 是一个基于Go实现的网关服务。</p>
<p>Kong：Kong是一个可扩展的开放源码API Layer(也称为API网关或API中间件)。Kong 在任何RESTful API的前面运行，通过插件扩展，它提供了超越核心平台的额外功能和服务。</p>
<p>Netflix zuul：Zuul是一种提供动态路由、监视、弹性、安全性等功能的边缘服务。Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。</p>
<p>除了路由之外，Api网关服务还包含：认证和授权，重试、熔断、降级，负载均衡，日志、监控、链路追踪，灰度发布，ABTesting 等功能。</p>
<h4>3.3 配置中心 <a href="#scroller-24" id="scroller-24"></a></h4>
<p><img src="/images/blog/tech/microservice/image_1_4.png" alt="image_1_4.png"></p>
<p>上面这个是携程的开源配置中心Apollo系统的架构设计，我们从下往上进行分析：</p>
<p>1、Config Service提供配置的读取、推送等功能，服务对象是Apollo客户端</p>
<p>2、Admin Service提供配置的修改、发布等功能，服务对象是Apollo Portal（管理界面）</p>
<p>3、Config Service和Admin Service都是多实例、无状态部署，所以需要将自己注册到Eureka中并保持心跳，支持注册、更新、删除能力</p>
<p>4、在Eureka之上我们架了一层Meta Server用于封装Eureka的服务发现接口</p>
<p>5、Client通过域名访问Meta Server获取Config Service服务列表（IP+Port），而后直接通过IP+Port访问服务，同时在Client侧会做load balance、错误重试</p>
<p>6、Portal通过域名访问Meta Server获取Admin Service服务列表（IP+Port），而后直接通过IP+Port访问服务，同时在Portal侧会做load balance、错误重试</p>
<p>7、为了简化部署，我们实际上会把Config Service、Eureka和Meta Server三个逻辑角色部署在同一个JVM进程中</p>
<p>上面的架构体现了如下特点：</p>
<p>•高可用：配置服务为多实例部署，访问层保证 load balance、错误重试 •弱依赖：使用了Eureka来做配置中心的服务注册，如果出现问题或者网络出现问题的时候，服务应该可以依赖于它本身所缓存的配置来提供正常的服务</p>
<h4>3.4 服务通信 <a href="#scroller-25" id="scroller-25"></a></h4>
<p>分布式系统一般是由多个微服务颗粒组成的，微服务与微服务之前存在互相调用，甚至多个链路访问的情况。所以他们之间是需要通信的，通信方式继承于SOA，包含同步与异步两种模式。</p>
<p><strong>3.4.1 同步访问方式</strong></p>
<p>1、RPC 访问模式</p>
<p>Remote Procedure Call Protocol，远程过程调用协议，一般使用在分布式业务或者微服务架构风格中。像调用本地函数一样，去调用一个远端服务。本质上是请求链的底层，维护同一个端口，进行socket通信。常见的RPC技术包含 gRPC、Dubbo、Thrift 等。</p>
<p><img src="/images/blog/tech/microservice/image_1_5.png" alt="image_1_5.png"></p>
<p>2、REST 访问模式</p>
<p>这个应该大家最常用，可以通过一套统一风格的接口模式，为Web，iOS和Android等提供接口服务。</p>
<p><strong>3.4.2 异步访问方式</strong></p>
<p>消息中间件：RabbitMQ、Kafka、RocketMQ之类，对于实时性要求不那么严格的服务请求和计算。</p>
<h4>3.5 服务治理 <a href="#scroller-28" id="scroller-28"></a></h4>
<p>常见的服务治理手段有如下几种：</p>
<p><strong>3.5.1 节点管理</strong></p>
<p>服务调用失败时可能是服务提供者自身出现，也可能是网络发生故障，我们一般有两种处理手段。</p>
<p>1. 注册中心主动摘除机制 这种机制要求服务提供者定时向注册中心汇报心跳，如果超时，就认为服务提供者出现问题，并将节点从服务列表中摘除。</p>
<p>2. 服务消费者摘除机制 当服务提供者网络出现异常，服务消费者调用就会失败，如果持续错误就可以将它从服务提供者节点列表中移除。</p>
<p><strong>3.5.2 负载均衡</strong></p>
<p>服务消费者在从服务列表中选取可用节点时，如果能让性能较好的服务机多承担一些流量的话，就能充分利用机器的性能。这就需要对负载均衡算法做一些调整。</p>
<p>常用的负载均衡算法主要包括以下几种：</p>
<p>1. Radom 随机算法 从可用的服务节点中随机选取一个节点。一般情况下，随机算法是均匀的，也就是说后端服务节点无论配置好坏，最终得到的调用量都差不多。</p>
<p>2. Round Robin 轮询算法（加权重） 就是按照固定的权重，对可用服务节点进行轮询。如果所有服务节点的权重都是相同的，则每个节点的调用量也是差不多的。但可以给性能较好的节点的权重调大些，充分发挥其性能优势，提高整体调用的平均性能。</p>
<p>3. Least Conn 最少活跃调用算法 这种算法是在服务消费者这一端的内存里动态维护着同每一个服务节点之间的连接数，选择连接数最小的节点发起调用，也就是选择了调用量最小的服务节点，性能理论上也是最优的。</p>
<p>4. 一致性 Hash 算法 指相同参数的请求总是发到同一服务节点。当某一个服务节点出现故障时，原本发往该节点的请求，基于虚拟节点机制，平摊到其他节点上，不会引起剧烈变动。</p>
<p><strong>3.5.3 服务路由</strong></p>
<p>所谓的路由规则，就是通过一定的规则如条件表达式或者正则表达式来限定服务节点的选择范围。</p>
<p>制定路由规则主要有两个原因。</p>
<p>1. 业务存在灰度发布、多版本ABTesting的需求</p>
<p>功能逐步开放发布或者灰度测试的场景。</p>
<p>2. 多机房就近访问的需求</p>
<p>一般可以通过 IP 段规则来控制访问，在选择服务节点时，优先选择同一 IP 段的节点。这个也是算力靠近的优先原则。</p>
<p><strong>3.5.4 服务容错</strong></p>
<p>在分布式系统中，分区容错性是很重要的一个话题，要知道，服务间的调用调用并不总是成功，服务提供者程序bug、异常退出 或者 消费者与提供者之间的网络故障。而服务调用失败之后，我们需要一些方法来保证调用的正常。</p>
<p>常用的方式有以下几种：</p>
<p>FailOver 失败自动切换。就是服务消费者发现调用失败或者超时后，自动从可用的服务节点列表中选择下一个节点重新发起调用，也可以设置重试的次数。</p>
<p>FailBack 失败通知。就是服务消费者调用失败或者超时后，不再重试，而是根据失败的详细信息，来决定后续的执行策略。</p>
<p>FailCache 失败缓存。就是服务消费者调用失败或者超时后，不立即发起重试，而是隔一段时间后再次尝试发起调用。</p>
<p>FailFast 快速失败。就是服务消费者调用一次失败后，不再重试。</p>
<p>服务治理的手段是从不同角度来确保服务调用的成功率。节点管理是从服务节点健康状态角度来考虑，负载均衡和服务路由是从服务节点访问优先级角度来考虑，而服务容错是从调用的健康状态角度来考虑。</p>
<h4>3.6 服务监控 <a href="#scroller-33" id="scroller-33"></a></h4>
<p><img src="/images/blog/tech/microservice/image_1_6.png" alt="image_1_6.png"></p>
<p>常见的开发监控报警技术有 ELK、InfluxData的TICK、Promethues 等。</p>
<p>在分布式系统中，微服务一般都具有复杂的链路调用，对于链路之间的状态、服务可用性、调用情况的监控，是需要一套完整的服务监控系统去保障的。</p>
<p>如我们上面的那个图所示， 服务系统主要由哪几部分构成：</p>
<p>1、数据采集部分，包含性能指标信息、日志信息（一般是服务埋点日志或者sidecar的inbound、outbound信息）、端到端的Trace信息。</p>
<p>2、采集上来的监控数据通过传输系统，或者使用消息中间件来异步传输，或者调用服务端接口推送监控数据。并把这些数据持久化到我们的数据服务层中。</p>
<p>3、制定一套规则，对于采集到的数据进行清理、计算、分级等，处理好的数据，通过提前设置好的报警策略，来判断它是否触发了这些报警。</p>
<p>4、梳理完的数据可以进行查询展示（有一个日志查询界面）、分级报警、分析趋势报表推送等。</p>
<h4>3.7 服务追踪 <a href="#scroller-34" id="scroller-34"></a></h4>
<p>服务追踪的原理主要包括下面两个关键点。</p>
<p>1、为了实现请求跟踪，当请求发送到分布式系统的入口端点时，只需要服务跟踪框架为该请求创建一个唯一的跟踪标识，同时在分布式系统内部流转的时候，框架始终保持传递该唯一标识，直到返回给请求方为止，这个唯一标识就是前文中提到的 Trace ID。</p>
<p>通过 Trace ID 的记录，我们就能将所有请求过程的日志关联起来。</p>
<p>2、为了统计各处理单元的时间延迟，当请求到达各个服务组件时，或是处理逻辑到达某个状态时，也通过一个唯一标识来标记它的开始、具体过程以及结束，该标识就是前文中提到的 Span ID。对于每个 Span 来说，它必须有开始和结束两个节点，</p>
<p>通过记录开始 Span 和结束 Span 的时间戳，就能统计出该 Span 的时间延迟，除了时间戳记录之外，它还可以包含一些其他元数据，比如事件名称、请求信息等。</p>
<p><img src="/images/blog/tech/microservice/image_1_7.png" alt="image_1_7.png"></p>
<p>上图显示了Trace ID 和 Spand ID 在链路中的传输过程，它把服务调用的一个时序结构给展现出来了。</p>
<p>常见的服务链路追踪的技术有Zipkin、Pinpoint、SkyWalking 等。后面讲到Service Mesh的时候会详细说下Zipkin的x-b3 header头传递，以及流量染色的使用，非常给力。</p>
<h3>4 总结 <a href="#scroller-35" id="scroller-35"></a></h3>
<p>微服务架构提倡的单一应用程序划分成一组松散耦合的细粒度小型服务，辅助轻量级的协议，互相协调、互相配合，实现高效的应用价值，符合我们应用服务开发的发展趋势。</p>
<p>后续我们围绕它的核心模块：服务注册与发现、API 网关服务、分布式配置中心、服务通信、服务治理、分布式服务追踪与监控等，从原理到实践，一步步展开来研究。</p>
17:T3b49,<h3>1 传统单体系统介绍 <a href="#scroller-1" id="scroller-1"></a></h3>
<p>在很多项目的业务初期阶段，高速迭代上线是首要考虑的事情，对后期的容量预估、可扩展性和系统健壮性、高可用一般没有那么重视。但随着业务的发展，用户量、请求量的暴增，</p>
<p>发现原来的单体系统已经远远不满足需求了，特别是随着互联网整体的高速发展，对系统的要求越来越高。</p>
<p>但是物理服务器的CPU、内存、存储器、连接数等资源有限，单体系统能够承受的的QPS也是有限的，某个时段大量连接同时执行操作，会导致web服务和数据库服务在处理上遇到性能瓶颈。</p>
<p>为了解决这个问题，伟大的前辈们发扬了分而治之的思想，对大数据库、大表进行分割，可以参考我的《<a href="https://www.cnblogs.com/wzh2010/p/15049878.html">分库分表</a>》，以便实施更好的控制和管理。</p>
<p>同时创建多个服务实例，使用多台服务机进行CPU、内存、存储的分摊，提供更好的性能。</p>
<h4>1.1 单体系统的问题 <a href="#scroller-2" id="scroller-2"></a></h4>
<p>1、复杂性高：由于是一个单体的系统，所以整个系统的模块是耦合在一起的，模块的边界比较模糊、依赖关系错综复杂。功能的调整，容易带来不可知的影响和潜在的bug风险。</p>
<p>2、服务性能问题：单体系统遇到性能瓶颈问题，只能横向扩展，增加服务实例，进行负载均衡分担压力。无法纵向扩展，做模块拆分。</p>
<p>3、扩缩容能力受限：单体应用只能作为一个整体进行扩展，影响范围大，无法根据业务模块的需要进行单个模块的伸缩。</p>
<p>4、无法做故障隔离：当所有的业务功能模块都聚集在一个程序集当中，如果其中的某一个小的功能模块出现问题（如某个请求堵塞），那么都有可能会造成整个系统的崩溃。</p>
<p>5、发布的影响范围较大：每次发布都是整个系统进行发布，发布会导致整个系统的重启，对于大型的综合系统挑战比较大，如果将各个模块拆分，哪个部分做了修改，只发布哪个部分所在的模块即可。</p>
<h4>&#x20;<a href="#scroller-3" id="scroller-3"></a></h4>
<h4>1.2 单体系统的优点 <a href="#scroller-4" id="scroller-4"></a></h4>
<p>1、系统的简易性：系统语言风格、业务结构，接口格式均具有一致性，服务都是耦合在一起的，不存在各个业务通信问题。</p>
<p>2、易于测试：单体应用一旦部署，所有的服务或特性就都可以使用了，简化了测试过程，无需额外测试服务间的依赖，测试均可在部署完成后开始。</p>
<p>3、易于部署与升级：相对于微服务架构中的每个服务独立部署，单体系统只需将单个目录下的服务程序统一部署和升级。</p>
<p>4、较低的维护成本：只需维护单个系统即可。运维主要包括配置、部署、监控与告警和日志收集四大方面。相对于单体系统，微服务架构中的每个服务都需要独立地配置、部署、监控和日志收集，成本呈指数级增长。</p>
<h4>&#x20;<a href="#scroller-5" id="scroller-5"></a></h4>
<h4>1.3 单体服务到微服务的发展过程 <a href="#scroller-6" id="scroller-6"></a></h4>
<p>EUREKA的注册中心逐渐被ZooKeeper和Nacos等替代了。</p>
<p><img src="/images/blog/tech/microservice/image_2_1.png" alt="image_2_1.png"></p>
<h3>2 关于微服务 <a href="#scroller-7" id="scroller-7"></a></h3>
<p>微服务是一种架构模式，是面向服务的体系结构（SOA）软件架构模式的一种演变，它提倡将单一应用程序划分成一组松散耦合的细粒度小型服务，辅助轻量级的协议，互相协调、互相配合，为用户提供最终价值。所以，微服务（或微服务架构）是一种云原生架构方法，其中单个应用程序由许多松散耦合且可独立部署的较小组件或服务组成。这些服务通常包含如下特点：</p>
<h4>2.1 单一职责 <a href="#scroller-8" id="scroller-8"></a></h4>
<p>微服务架构中的每个节点高度服务化，都是具有业务逻辑的，符合高内聚、低耦合原则以及单一职责原则的单元，包括数据库和数据模型；不同的服务通过“管道”的方式灵活组合，从而构建出庞大的系统。</p>
<h4>2.2 轻量级通信 <a href="#scroller-9" id="scroller-9"></a></h4>
<p>通过REST API模式或者RPC框架，实现服务间互相协作的轻量级通信机制。</p>
<h4>2.3 独立性 <a href="#scroller-10" id="scroller-10"></a></h4>
<p>在微服务架构中，每个服务都是独立的业务单元，与其他服务高度解耦，只需要改变当前服务本身，就可以完成独立的开发、测试、部署、运维。</p>
<h4>2.4 进程隔离 <a href="#scroller-11" id="scroller-11"></a></h4>
<p>在微服务架构中，应用程序由多个服务组成，每个服务都是高度自治的独立业务实体，可以运行在独立的进程中，不同的服务能非常容易地部署到不同的主机上，实现高度自治和高度隔离。进程的隔离，还能保证服务达到动态扩缩容的能力，业务高峰期自动增加服务资源以提升并发能力，业务低谷期则可自动释放服务资源以节省开销。</p>
<h4>2.5 混合技术栈和混合部署方式 <a href="#scroller-12" id="scroller-12"></a></h4>
<p>团队可以为不同的服务组件使用不同的技术栈和不同的部署方式（公有云、私有云、混合云）。</p>
<h4>2.6 简化治理 <a href="#scroller-13" id="scroller-13"></a></h4>
<p>组件可以彼此独立地进行扩缩容和治理，从而减少了因必须缩放整个应用程序而产生的浪费和成本，因为单个功能可能面临过多的负载。</p>
<h4>2.7 安全可靠，可维护。 <a href="#scroller-14" id="scroller-14"></a></h4>
<p>从架构上对运维提供友好的支撑，在安全、可维护的基础上规范化发布流程，支持数据存储容灾、业务模块隔离、访问权限控制、编码安全检测等。</p>
<h3>3 微服务演进史 <a href="#scroller-15" id="scroller-15"></a></h3>
<p>我们前面已经了解了微服务的概念，通过百度指数可以看出，从2012年之后，微服务的发展有显著的发展趋势。</p>
<p><img src="/images/blog/tech/microservice/image_2_2.png" alt="image_2_2.png"></p>
<p>目前业内的微服务相关开发平台和框架还是比较多的，比如较早的Spring Cloud（使用Eureke做服务注册与发现，Ribbon做服务间负载均衡，Hystrix做服务容错保护），</p>
<p>阿里的Dubbo，微软的.Net体系微服务框架 Service Fabric，再到后来进阶的服务网格(Service Mesh,如 Istio、Linkerd）。</p>
<p>那从12年开始到现在，微服务到底发展到哪个阶段了，在各个阶段的进阶过程中，又有哪些的变化。所以我们需要了解微服务技术的历史发展脉络。</p>
<p>下面的内容参考了 <a href="https://philcalcado.com/">Phil Calçado</a>的文章<a href="https://philcalcado.com/2017/08/03/pattern_service_mesh.html">《Pattern: Service Mesh》</a>，从开发者的视角，详细分析了从微服务到Service Mesh技术的演进过程，这边做了进一步的整理和总结。</p>
<h4>3.1 第一阶：简单服务通信模块 <a href="#scroller-16" id="scroller-16"></a></h4>
<p>这是最初的模样，开发人员最开始的时候想象的两个服务间简单的通信模式，抽象表示如下，两个服务之间直接进行通信：</p>
<p><img src="/images/blog/tech/microservice/image_2_3.png" alt="image_2_3.png"></p>
<p>3.2 第二阶：原始通信时代</p>
<p>上面的方式非常简单，但实际情况远比想象的复杂很多，通信需要底层字节码传输和电子信号的物理层来完成，在TCP协议出现之前，</p>
<p>服务需要自己处理网络通信所面临的丢包、错误、乱序、重试等一系列流控问题，因此服务实现中，除了业务逻辑外，还包含对网络传输问题的处理逻辑。</p>
<p><img src="/images/blog/tech/microservice/image_2_4.png" alt="image_2_4.png"></p>
<h4>3.3 第三阶：TCP时代 <a href="#scroller-18" id="scroller-18"></a></h4>
<p>TCP协议的出现，避免了每个服务自己实现一套相似的网络传输处理逻辑，解决网络传输中通用的流量控制问题。</p>
<p>这时候我们把处理网络传输的能力下沉，从服务的实现中抽离出来，成为操作系统网络层的一部分。</p>
<p><img src="/images/blog/tech/microservice/image_2_5.png" alt="image_2_5.png"></p>
<h4>3.4 第四阶：第一代微服务（Spring Cloud/RPC） <a href="#scroller-19" id="scroller-19"></a></h4>
<p>TCP出现之后，服务间的网络通信已经不是一个难题了，所以 GFS/BigTable/MapReduce 为代表的分布式系统得到了蓬勃的发展。</p>
<p>这时，分布式系统特有的通信语义又出现了，如服务注册与发现、负载均衡、熔断降级策略、认证和授权、端到端trace、日志与监控等，因此根据业务需求,完成一些通信语义的实现。</p>
<p><img src="/images/blog/tech/microservice/image_2_6.png" alt="image_2_6.png"></p>
<h4>3.5 第五阶：第二代微服务 <a href="#scroller-20" id="scroller-20"></a></h4>
<p>为了避免每个服务都需要自己实现一套分布式系统通信的语义功能，随着技术的发展，一些面向微服务架构的通用开发框架出现了，如Twitter的<a href="https://finagle.github.io/">Finagle</a>、Facebook的<a href="https://code.facebook.com/posts/1503205539947302">Proxygen</a>以及Spring Cloud等，</p>
<p>这些框架实现了分布式系统通信需要的各种通用语义功能：如负载均衡和服务发现等，因此一定程度上屏蔽了这些通信细节，使得开发人员使用较少的框架代码就能开发出健壮的分布式系统。</p>
<p><img src="/images/blog/tech/microservice/image_2_7.png" alt="image_2_7.png"></p>
<h4>3.6 第六阶：第一代Service Mesh <a href="#scroller-21" id="scroller-21"></a></h4>
<p>上面的第二代微服务框架目前看着挺完美了，但整套微服务框架其实是很复杂的，比如Spring Cloud，聚合了很多组件。所以在实践过程中，会发现有如下诸多问题：</p>
<ul>
<li>**侵入性强。**想要集成SDK的能力，除了需要添加相关依赖，业务层中入侵的代码、注解、配置，与治理层界限不清晰。</li>
<li>**升级成本高。**每次升级都需要业务应用修改SDK版本，重新进行功能回归测试，并对每一台服务进行部署上线，与快速迭代开发相悖。</li>
<li>**版本碎片化严重。**由于升级成本高，而中间件版本更新快，导致线上不同服务引用的SDK版本不统一、能力参差不齐，造成很难统一治理。</li>
<li>**中间件演变困难。**由于版本碎片化严重，导致中间件向前演进的过程中就需要在代码中兼容各种各样的老版本逻辑，带着&quot;枷锁”前行，无法实现快速迭代。</li>
<li>**内容多、门槛高。**依赖组件多，学习成本高，即使通用分布式系统屏蔽了很多的实现细节，我们引入微服务框架并熟练使用也是要花费巨大的精力的。</li>
<li>**治理功能不全。**不同于RPC框架，SpringCloud作为治理全家桶的典型，也不是万能的，诸如协议转换支持、多重授权机制、动态请求路由、故障注入、灰度发布等高级功能并没有覆盖到。</li>
<li>**无法实现真正意义上的语言无关性。**提供的框架一般只支持一种或几种语言，要将框架不支持的语言研发的服务也纳入微服务架构中，是比较有难度的。</li>
</ul>
<p>所以，第一代微服务架构 Service Mesh就产生了，它作为一个基础设施层，能够与业务解耦，主要解决复杂网络拓扑下微服务与微服务之间的通信，其实现形态一般为轻量级网络代理，并与应用以边车代理（SideCar）模式部署，同时对业务应用透明。</p>
<p><img src="/images/blog/tech/microservice/image_2_8.png" alt="image_2_8.png"></p>
<p>SideCar将分布式服务的通信抽象为单独一层，需要和服务部署在一起，接管服务的流量，通过代理之间的通信间接完成服务之间的通信请求。</p>
<p>所以在这一层中它能够实现负载均衡、服务发现、认证授权、监控追踪、流量控制等分布式系统所需要的功能。</p>
<p><img src="/images/blog/tech/microservice/image_2_9.png" alt="image_2_9.png"></p>
<p>如果我们从一个全局视角来看，绿色的为应用服务，蓝色的为SideCar，就会得到如下部署图：</p>
<p><img src="/images/blog/tech/microservice/image_2_10.png" alt="image_2_10.png"></p>
<p>如果我们省略去服务，只看Service Mesh的代理边车的网格应该是这样的：</p>
<p><img src="/images/blog/tech/microservice/image_2_11.png" alt="image_2_11.png"></p>
<p>流量经过的时候，会先被代理边车所劫持，然后再进入服务，所以它就是一个由若干服务代理所组成的错综复杂的网格。</p>
<h4>3.7 第七阶：第二代Service Mesh <a href="#scroller-22" id="scroller-22"></a></h4>
<p>第一代Service Mesh由一系列独立运行的单机代理服务构成，为了提供统一的上层运维入口，演化出了集中式的控制面板，我们称之为控制面（control plane）。</p>
<p>控制面和所有的数据面（data plane，即代理边车）进行交互，比如策略下发、数据采集等。这就是以Istio为代表的第二代Service Mesh。</p>
<p><img src="/images/blog/tech/microservice/image_2_12.png" alt="image_2_12.png"></p>
<p>只包含控制面和数据面的 Service Mesh 服务网格全局结构图 如下：</p>
<p><img src="/images/blog/tech/microservice/image_2_13.png" alt="image_2_13.png"></p>
<p>从上面的结构图可以看出，Service Mesh 的基础设施层主要分为两部分：控制平面与数据平面。当前流行的开源服务网格 Istio 和 Linkerd 都是这种构造。</p>
<p>控制平面的特点：</p>
<ul>
<li>不直接解析数据包。</li>
<li>与控制平面中的代理通信，下发策略和配置。</li>
<li>负责网络行为的可视化。</li>
<li>通常提供 API 或者命令行工具可用于配置版本化管理，便于持续集成和部署。</li>
</ul>
<p>数据平面的特点：</p>
<ul>
<li>通常是按照无状态目标设计的，但实际上为了提高流量转发性能，需要缓存一些数据，因此无状态也是有争议的。</li>
<li>直接处理入站和出站数据包，转发、路由、健康检查、负载均衡、认证、鉴权、产生监控数据等。</li>
<li>对应用来说透明，即可以做到无感知部署。</li>
</ul>
<p>到这一步我们大概了解了微服务架构的演进过程，也初步了解Service Mesh技术比较于传统的微服务架构有哪些优势。</p>
18:T2281,<p>前面我们学习了微服务的全景架构，了解到相对于传统单体架构，微服务的优势，以及系统服务化的发展趋势。</p>
<p>对于新启动的项目，我们在权衡之后可以大方的使用微服务架构。但其实大部分情况下，我们还要去维护一些以前研发的单体系统，这些系统可能因为访问流量的膨胀、功能的扩张而显得非常臃肿不堪，急需要向微服务架构迁移。</p>
<h3>1 微服务迁移准备  <a href="#scroller-1" id="scroller-1"></a></h3>
<p>1、需对业务充分了解，这是服务拆分，通信设计，资源整合的必要前提。</p>
<p>2、适应微服务架构设计原则：小版本，高速迭代。</p>
<p>3、快速的环境提供能力：依赖于云计算、容器技术，快速交付环境。</p>
<p>4、服务合理拆分：需符合团队结构或能逆向影响，能对组织架构进行微调并划分职责。（康威定律和逆康威定律）</p>
<p>5、基本的监控能力：包括基础的技术监控和业务监控。</p>
<p>6、快速的应用部署能力：需要部署管道提供快速的部署能力。</p>
<p>7、DevOps 自动化运维能力：需要具有良好的持续集成和持续交付能力，还需要对问题、故障的快速响应能力，开发、测试和运维能协同工作。</p>
<h3>2 微服务颗粒的拆分策略 <a href="#scroller-2" id="scroller-2"></a></h3>
<p>前面两篇文章我们学习了What &amp; Why（什么是微服务和为什么需要做微服务架构），这一章我们就来探讨如何做微服务架构的拆分（How）。</p>
<p>微服务拆分没有一个绝对的标准答案，服务拆分的粒度需要根据业务场景来规划，而随着业务的发展，原先的架构方案也需要做调整。</p>
<p>虽然没有固定的套路，但是我们在业务实践过程中总结的一些经验，以做参考。</p>
<h4>2.1 基于业务逻辑拆分 <a href="#scroller-3" id="scroller-3"></a></h4>
<p>基于业务逻辑拆分相对好理解一点，典型的单一职责原则，我们将功能相近的业务整合到一个服务颗粒上。比如一个办公领域系统，考勤、工作流、音视频会议是是三个截然不同的业务领域，这可能就是我们拆分的一个入手点。</p>
<p><strong>2.1.1 领域模型拆分</strong></p>
<p>领域驱动设计DDD（Domain-Driven Design 领域驱动设计）是一个很简单的概念，表示我们对系统的划分是基于领域的，也即是基于业务方向去思考的。</p>
<p>举一个典型的电商业务例子。电商的业务体系庞大，涉及各方面的细节。但是我们大概能够根据业务的职能做一个拆分，比如阿里的电商中台业务，包含 用户账号子系统、商品子系统、订单子系统、客户子系统、物流子系统 等。</p>
<p>因为职能不同，这些领域之间包含清晰的界限，所以我们可以按照这个方向将服务于不同领域（商品域和订单域）的子系统拆成独立的服务颗粒。如下图：</p>
<p><img src="/images/blog/tech/microservice/image_6_7.png" alt="image_6_7.png"></p>
<p><strong>2.1.2 用户群体拆分</strong></p>
<p>根据用户群体做拆分，我们首先要了解自己的系统业务里的用户角色领域是否没有功能耦合，有清晰的领域界限。</p>
<p>比如教育信息化系统，教师的业务场景和学生的业务场景，基本比较独立，而且拆分后流量上有明显的削弱，这时候结合具体的业务分析，看是否有价值。如下图所示：</p>
<p><img src="/images/blog/tech/microservice/image_4_2.png" alt="image_4_2.png"></p>
<h4>2.2 基于可扩展拆分  <a href="#scroller-6" id="scroller-6"></a></h4>
<p>这个需要区分系统中变与不变的部分，不变的部分一般是成熟的、通用的服务功能，变的部分一般是改动比较多、满足业务迭代扩展性需要的功能，我们可以将不变的部分拆分出来，作为共用的服务，将变的部分独立出来满足个性化扩展需要。同时根据二八原则，系统中经常变动的部分大约只占 20%，而剩下的 80% 基本不变或极少变化，这样的拆分也解决了发布频率过多而影响成熟服务稳定性的问题。比如一个电商领域的系统，用户信息、基本商品信息、物流信息 等模块的管理能力和视图界面，一般是比较稳定的；而类似运营活动的功能和页面一般是经常变化的（520、618、双11），会有不同的活动策略和视图界面，需要经常迭代发布。如下图所示</p>
<p><img src="/images/blog/tech/microservice/image_4_3.png" alt="image_4_3.png"></p>
<h4>2.3 基于可靠性拆分 <a href="#scroller-7" id="scroller-7"></a></h4>
<p><strong>2.3.1 核心模块拆分</strong></p>
<p>我们团队在做MySQL数据库和Redis集群拆分的时候，总会把一些重要的模块独立放在一个集群上，不与其他模块混用，而这个独立的集群，服务机性能要是最好的。这样做的目的是，当重要度较低的模块发生故障时，不会影响重要度高的模块。</p>
<p>同要的道理，我们会将  账号信息、登录信息、服务中心等重要度最高的要害模块单独拆分在一个服务颗粒上（因为这类模块不可用之后，整个系统基本完全瘫痪），再做成服务集群，来保障它的高可用。 如下图所示：</p>
<p><img src="/images/blog/tech/microservice/image_4_4.png" alt="image_4_4.png"></p>
<p><strong>2.3.2 主次链路拆分</strong></p>
<p>在各个业务系统中，其实都会有主次业务链路。主业务链条，完成了业务系统中最核心的那部分工作。而次链路是保证其他基础功能的稳定运行。</p>
<p>以电商为例子：商品搜索-&gt;商品详情页-&gt;购物车模块-&gt;订单结算-&gt;支付业务，就是一条最简单的主链路。主链路是整个系统的核心主战场，最好的资源跟火力都要放在这里，保证不失守。</p>
<p>一个系统一般有多条核心链路和多条次链路，互相支持构成一个完整的系统。而我们将主次链路进行拆分，主要为了以下几个目标。</p>
<p><strong>异常容错</strong></p>
<p>为主链路建立层次化的降级策略（多级降级），以及合理的熔断策略，这部分我们将在Hystrix服务容错降级的文章中详细解释。</p>
<p><strong>计算资源分配</strong></p>
<p>主链路通常来讲都是高频场景，自然需要更多的计算资源，最主要的体现就是集群里分配的虚机数量多。比如电商场景中特惠专场抢购等。</p>
<p>但是无论是虚机的分配，还是kubernetes的动态扩缩容，应该都需要单独优待，如资源分配倾斜，独立治理等。</p>
<p><strong>服务隔离</strong></p>
<p>主链路是高频且核心的主业务模块，把主链路的服务与其他起辅助作用的业务服务隔离开来，避免次链路服务的异常情况影响到主链路服务。</p>
<p><img src="/images/blog/tech/microservice/image_4_5.png" alt="image_4_5.png"></p>
<h4>2.4 基于性能需求拆分 <a href="#scroller-10" id="scroller-10"></a></h4>
<p>根据性能需求来进行拆分。简单来说就是访问量特别大，访问频率特别高的业务，又要保证高效的响应能力，这些业务对性能的要求特别高。比如积分竞拍、低价秒杀、限量抢购。</p>
<p>我们要识别出某些超高并发量的业务，尽可能把这部分业务独立拆分出来。这么做的原因非常简单，一个保证满足高性能业务需求，另一个保证业务的独立性，不互相影响。</p>
<p>类似积分竞拍、超低价秒杀、限量抢购，对瞬间峰值和计算性能要求是非常高的。这部分的业务如果跟其他通用业务放在一块，一个是可能互相影响，比如某个链路阻塞，会导致雪崩沿调用链向上传递。</p>
<p>另外一个是如果多个业务耦合在一块，发布频率变高、服务扩缩容变难、维护复杂度变高。</p>
<p><img src="/images/blog/tech/microservice/image_4_6.png" alt="image_4_6.png"></p>
<h3>3 总结拆分原则 <a href="#scroller-11" id="scroller-11"></a></h3>
<ul>
<li>先少后多（微服务数量）、先粗后细(粒度)</li>
<li>基于业务逻辑进行拆分（用户群体、业务领域等模型）</li>
<li>基于可靠性（核心模块独立化、主次链路隔离）</li>
<li>基于性能拆分（独立拆分高性能场景）</li>
<li>接口需保证幂等</li>
<li>接口数据定义严禁内嵌，透传</li>
<li>规范化工程结构，符合微服务风格</li>
<li>不止对计算服务记性拆分，服务层 -&gt; 缓存层 -&gt; 数据层 的逐步拆解，才能发挥最大功效。</li>
</ul>
6:["$","article",null,{"className":"min-h-screen","children":["$","div",null,{"className":"mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"rounded-2xl shadow-2xl border border-gray-200 hover:shadow-3xl transition-all duration-300 p-8 sm:p-12","children":[["$","header",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center mb-6","children":["$","div",null,{"className":"inline-flex items-center px-3 py-1.5 bg-gray-50 text-gray-600 rounded-md text-sm font-normal","children":[["$","svg",null,{"className":"w-4 h-4 mr-2 text-gray-400","fill":"none","stroke":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"}]}],["$","time",null,{"dateTime":"2024-03-20","children":"2024年03月20日"}]]}]}],["$","h1",null,{"className":"text-4xl font-bold text-gray-900 mb-6 text-center","children":"微服务全景架构"}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-6 justify-center","children":[["$","$L5","微服务架构",{"href":"/blog/tag/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/page/1/","className":"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-200 text-gray-800 hover:bg-gray-300 hover:text-gray-900 transition-colors","children":"微服务架构"}],["$","$L5","技术专题",{"href":"/blog/tag/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/page/1/","className":"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-200 text-gray-800 hover:bg-gray-300 hover:text-gray-900 transition-colors","children":"技术专题"}]]}]]}],["$","div",null,{"className":"max-w-5xl mx-auto","children":["$","$L14",null,{"content":"$15"}]}],["$","$11",null,{"fallback":["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200","children":"加载导航中..."}],"children":["$","$L16",null,{"globalNav":{"prev":{"slug":"tech/microservice/微服务及其演进史","title":"微服务及其演进史","description":"在很多项目的业务初期阶段，高速迭代上线是首要考虑的事情，对后期的容量预估、可扩展性和系统健壮性、高可用一般没有那么重视。但随着业务的发展，用户量、请求量的暴增， 发现原来的单体系统已经远远不满足需求了，特别是随着互联网整体的高速发展，对系统的要求越来越高。 但是物理服务器的CPU、内存、存储器、连接...","pubDate":"2024-03-19","tags":["微服务架构","技术专题"],"heroImage":"$undefined","content":"$17"},"next":{"slug":"tech/microservice/微服务拆分策略","title":"微服务拆分策略","description":"前面我们学习了微服务的全景架构，了解到相对于传统单体架构，微服务的优势，以及系统服务化的发展趋势。 对于新启动的项目，我们在权衡之后可以大方的使用微服务架构。但其实大部分情况下，我们还要去维护一些以前研发的单体系统，这些系统可能因为访问流量的膨胀、功能的扩张而显得非常臃肿不堪，急需要向微服务架构迁移...","pubDate":"2024-03-21","tags":["微服务架构","技术专题"],"heroImage":"$undefined","content":"$18"}},"tagNav":{"微服务架构":{"prev":"$6:props:children:props:children:props:children:2:props:children:props:globalNav:prev","next":"$6:props:children:props:children:props:children:2:props:children:props:globalNav:next"},"技术专题":{"prev":"$6:props:children:props:children:props:children:2:props:children:props:globalNav:prev","next":"$6:props:children:props:children:props:children:2:props:children:props:globalNav:next"}}}]}],["$","$L19",null,{}]]}]}]}]
9:null
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
b:{"metadata":[["$","title","0",{"children":"微服务全景架构 - Skyfalling Blog"}],["$","meta","1",{"name":"description","content":"微服务架构提倡的单一应用程序划分成一组松散耦合的细粒度小型服务，辅助轻量级的协议，互相协调、互相配合，实现高效的应用价值，符合我们应用服务开发的发展趋势。"}],["$","meta","2",{"property":"og:title","content":"微服务全景架构"}],["$","meta","3",{"property":"og:description","content":"微服务架构提倡的单一应用程序划分成一组松散耦合的细粒度小型服务，辅助轻量级的协议，互相协调、互相配合，实现高效的应用价值，符合我们应用服务开发的发展趋势。"}],["$","meta","4",{"property":"og:type","content":"article"}],["$","meta","5",{"property":"article:published_time","content":"2024-03-20"}],["$","meta","6",{"property":"article:author","content":"Skyfalling"}],["$","meta","7",{"name":"twitter:card","content":"summary"}],["$","meta","8",{"name":"twitter:title","content":"微服务全景架构"}],["$","meta","9",{"name":"twitter:description","content":"微服务架构提倡的单一应用程序划分成一组松散耦合的细粒度小型服务，辅助轻量级的协议，互相协调、互相配合，实现高效的应用价值，符合我们应用服务开发的发展趋势。"}],["$","link","10",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","link","11",{"rel":"icon","href":"/favicon.svg"}]],"error":null,"digest":"$undefined"}
13:{"metadata":"$b:metadata","error":null,"digest":"$undefined"}
