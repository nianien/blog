1:"$Sreact.fragment"
2:I[5651,["874","static/chunks/874-80549eca86098588.js","177","static/chunks/app/layout-32556b88729833ce.js"],"default"]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[6874,["874","static/chunks/874-80549eca86098588.js","909","static/chunks/app/blog/%5B...slug%5D/page-b420037c820534af.js"],""]
7:I[9665,[],"OutletBoundary"]
a:I[4911,[],"AsyncMetadataOutlet"]
c:I[9665,[],"ViewportBoundary"]
e:I[9665,[],"MetadataBoundary"]
10:I[6614,[],""]
:HL["/blog/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/blog/_next/static/css/b383bfdf312065bd.css","style"]
0:{"P":null,"b":"Kw2pFI3i7zWLe0FOWC9Np","p":"/blog","c":["","blog","fu-wu-zhu-ce-yu-fa-xian-shi-jian-pian",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","fu-wu-zhu-ce-yu-fa-xian-shi-jian-pian","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/blog/_next/static/css/b383bfdf312065bd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"zh-CN","children":["$","body",null,{"className":"__className_067971","children":["$","div",null,{"className":"min-h-screen flex flex-col","children":[["$","$L2",null,{}],["$","main",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-gray-900","children":["$","div",null,{"className":"mx-auto max-w-7xl px-6 py-12 md:flex md:items-center md:justify-between lg:px-8","children":[["$","div",null,{"className":"flex justify-center space-x-6 md:order-2","children":[["$","$L5",null,{"href":"/about","className":"text-gray-400 hover:text-gray-300","children":"关于"}],["$","$L5",null,{"href":"/blog","className":"text-gray-400 hover:text-gray-300","children":"博客"}],["$","$L5",null,{"href":"/contact","className":"text-gray-400 hover:text-gray-300","children":"联系"}]]}],["$","div",null,{"className":"mt-8 md:order-1 md:mt-0","children":["$","p",null,{"className":"text-center text-xs leading-5 text-gray-400","children":"© 2024 Skyfalling Blog. All rights reserved."}]}]]}]}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","fu-wu-zhu-ce-yu-fa-xian-shi-jian-pian","c"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","jZimHYGeJ65G8f-VNs2WBv",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$Le",null,{"children":"$Lf"}]]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
11:"$Sreact.suspense"
12:I[4911,[],"AsyncMetadata"]
f:["$","div",null,{"hidden":true,"children":["$","$11",null,{"fallback":null,"children":["$","$L12",null,{"promise":"$@13"}]}]}]
14:T4aa1,
<h1>服务注册与发现（实践篇）</h1></p><p><h2>1 服务注册中心 <a href="#scroller-1" id="scroller-1"></a></h2><p>前面我们对业内几种比较常见的注册中心做了介绍：Eureka、Zookeeper、Consul、Etcd。</p><p>并且在各个指标上做了对比：注册方式（watch/polling）、健康检查、雪崩保护、安全与权限，以及在Spring Cloud、Dubbo、Kubernets上的支持程度。方便我们在不同的场景下做正确的技术选型。</p><p>| <strong>指标</strong>             | <strong>Eureka</strong>        | <strong>Zookeeper</strong>   | <strong>Consul</strong>          | <strong>Etcd</strong>            |</p>
<p>| ------------------ | ----------------- | --------------- | ------------------- | ------------------- |</p>
<p>| 一致性协议              | AP                | CP（Paxos算法）     | CP（Raft算法）          | CP（Raft算法）          |</p>
<p>| 健康检查               | TTL(Time To Live) | TCP Keep Alive  | TTL\HTTP\TCP\Script | Lease TTL KeepAlive |</p>
<p>| watch/long polling | 不支持               | watch           | long polling        | watch               |</p>
<p>| 雪崩保护               | 支持                | 不支持             | 不支持                 | 不支持                 |</p>
<p>| 安全与权限              | 不支持               | ACL             | ACL                 | RBAC                |</p>
<p>| 是否支持多数据中心          | 是                 | 否               | 是                   | 否                   |</p>
<p>| 是否有管理界面            | 是                 | 否（可用第三方ZkTools） | 是                   | 否                   |</p>
<p>| Spring Cloud 集成    | 支持                | 支持              | 支持                  | 支持                  |</p>
<p>| Dubbo 集成           | 不支持               | 支持              | 支持                  | 不支持                 |</p>
<p>| K8S 集成             | 不支持               | 不支持             | 支持                  | 支持                  |</p><p>我们可以看出，四种技术类型对Spring Cloud的支持度都很高。Spring Cloud是微服务架构的一站式解决方案，我们平时构建微服务的过程中需要做的的如 配置管理、服务发现、负载均衡、断路器、智能路由、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作。Spring Cloud 为我们提供了一套简易的编程模型，使我们能在 Spring Boot 的基础上轻松地实现微服务项目的构建。</p><p>Spring Cloud包含了多个不同开源产品，来保证一站式的微服务解决方案，如：Spring Cloud Config、Spring Cloud Netflix、Spring Cloud Security、Spring Cloud Commons、Spring Cloud Zookeeper、Spring Cloud CLI等项目。</p><h2>2 Spring Cloud 框架下实现 <a href="#scroller-2" id="scroller-2"></a></h2><p>Spring Cloud为服务治理做了一层抽象，这样能够支持多种不同的服务治理框架，比如：Netflix Eureka、Consul。我们这边就以这两个为例子，看看服务治理是如何实现。</p><p>> _在Spring Cloud服务治理抽象层的作用下，可以无缝地切换服务治理实现，且不影响任何其他的服务注册、发现、调用逻辑。_</p>
<p>></p>
<p>> _所以，下面我们通过介绍这两种服务治理的实现来体会Spring Cloud这一层抽象所带来的好处。_</p><h3>2.1 Spring Cloud Eureka <a href="#scroller-3" id="scroller-3"></a></h3></p><p>Spring Cloud Eureka是Spring Cloud Netflix项目下的服务治理模块。而Spring Cloud Netflix项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。</p><p>通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等。</p><p>下面，就来具体看看如何使用Spring Cloud Eureka实现服务治理。</p><p><h4>2.1.1 创建注册中心 <a href="#scroller-4" id="scroller-4"></a></h4><p>创建一个Spring Cloud项目，我们命名为micro-service-center，并在<code>pom.xml</code>中引入需要的依赖内容：</p><p><code></code>`xml</p>
<p>1 <packaging>pom</packaging> </p>
<p><code></code>`</p><p>表明这个项目中可以没有Java代码，也不执行任何代码，只是为了聚合工程或者传递依赖，所以可以把src文件夹删了。这是一个父级项目，因为我们还要在下面建立Eureka的注册中心、客户端等多个子项目 。</p><p>在micro-service-center下，新建一个命名为 eureka-service 的Module，依旧是Spring Cloud 项目，建完之后，pom.xml做如下改动：</p><p><code></code>`xml</p>
<p> 1 <!--    在子工程中添加父工程名称--></p>
<p> 2 <parent></p>
<p> 3     <groupId>com.microservice</groupId></p>
<p> 4     <artifactId>center</artifactId></p>
<p> 5     <version>1.0.0</version></p>
<p> 6 </parent></p>
<p> 7 </p>
<p> 8 </p>
<p> 9 <dependencies></p>
<p>10 <!--   加入 eureka 服务 --></p>
<p>11         <dependency></p>
<p>12             <groupId>org.springframework.cloud</groupId></p>
<p>13             <artifactId>spring-cloud-netflix-eureka-server</artifactId></p>
<p>14         </dependency></p>
<p>15 </dependencies> </p>
<p><code></code>`</p><p>改完之后，回到父项目micro-service-center，修改pom中的信息：</p><p><code></code>`xml</p>
<p> 1 <groupId>com.microservice</groupId></p>
<p> 2 <artifactId>center</artifactId></p>
<p> 3 <packaging>pom</packaging></p>
<p> 4 <version>1.0.0</version></p>
<p> 5 <name>center</name></p>
<p> 6 <description>Demo project for Spring Boot</description></p>
<p> 7 </p>
<p> 8 <!--    在父工程添加子工程名称--></p>
<p> 9 <modules></p>
<p>10    <module>eureka-service</module></p>
<p>11    <module>eureka-client</module></p>
<p>12 </modules> </p>
<p><code></code>`</p><p>对两个项目进行clean + install，应该是成功的。</p><p>eureka-service我们是作为注册中心来用的，所以在它的主类Application中加入<code>@EnableEurekaServer</code>注解，就能开启注册中心功能。</p><p><code></code>`java</p>
<p>1 @SpringBootApplication</p>
<p>2 @EnableEurekaServer</p>
<p>3 public class ServiceApplication {</p>
<p>4     public static void main(String[] args) {</p>
<p>5         SpringApplication.run(ServiceApplication.class, args);</p>
<p>6         System.out.println("Start Eureka Service");</p>
<p>7     }</p>
<p>8 }</p>
<p><code></code>`</p><p>但是默认情况下，该注册中心也会把自己当做客户端，那就变成自己注册自己了，这个是可以剔除的，我们看一下它的YAML中的详细配置，注释比较清楚：</p><p><code></code>`yaml</p>
<p> 1 server:</p>
<p> 2   port: 1000</p>
<p> 3 spring:</p>
<p> 4   application:</p>
<p> 5     name: eureka-server</p>
<p> 6 eureka:</p>
<p> 7   instance:</p>
<p> 8     hostname: localhost</p>
<p> 9   client:</p>
<p>10     register-with-eureka: false  # 不作为客户端进行注册</p>
<p>11     fetch-registry: false  # 不获取注册列表</p>
<p>12     service-url:  # 注册地址，客户端需要注册到该地址中</p>
<p>13       defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ </p>
<p><code></code>`</p><p>文中的注释还是比较清楚的。 这边可以看到，端口号是1000，所以当工程启动之后，访问 [http://localhost:1000/](http://localhost:1000/) 是可以看到Eureka注册中心页面的。其中还没有发现任何服务。</p><img src="/images/books/image_5_1_1.png" alt="" /><h4>2.1.2 创建客户端 <a href="#scroller-5" id="scroller-5"></a></h4><p>目前服务中心还是空的，所以我们创建一个能够提供服务的客户端，并将其注册到注册中心去。</p><p>同样的，我们创建一个Spring Cloud的子项目，命名为<code>eureka-client</code>，<code>pom.xml</code>中的配置如下：</p><p><code></code>`xml</p>
<p> 1 <!--    在子工程中添加父工程名称--></p>
<p> 2 <parent></p>
<p> 3     <groupId>com.microservice</groupId></p>
<p> 4     <artifactId>center</artifactId></p>
<p> 5     <version>1.0.0</version></p>
<p> 6 </parent></p>
<p> 7 </p>
<p> 8 </p>
<p> 9 <dependencies></p>
<p>10 </p>
<p>11 <!--    加入 eureka 服务 --></p>
<p>12 <dependency></p>
<p>13     <groupId>org.springframework.cloud</groupId></p>
<p>14     <artifactId>spring-cloud-netflix-eureka-server</artifactId></p>
<p>15 </dependency></p>
<p>16 </p>
<p>17 <dependency></p>
<p>18     <groupId>org.projectlombok</groupId></p>
<p>19     <artifactId>lombok</artifactId></p>
<p>20 </dependency></p>
<p>21 </p>
<p>22 </dependencies> </p>
<p><code></code>`</p><p>在应用主类Application文件中通过加上<code>@EnableDiscoveryClient</code>注解，该注解保证当前服务被Eureka当成provider发现。</p><p><code></code>`java</p>
<p>1 @SpringBootApplication</p>
<p>2 @EnableDiscoveryClient</p>
<p>3 public class ClientApplication {</p>
<p>4     public static void main(String[] args) {</p>
<p>5         SpringApplication.run(ClientApplication.class, args);</p>
<p>6         System.out.println("start client!");</p>
<p>7     }</p>
<p>8 } jC</p>
<p><code></code>`</p><p>在YAML文件上加上如下配置：</p><p><code></code>`yaml</p>
<p>1 server:</p>
<p>2   port: 1001</p>
<p>3 spring:</p>
<p>4   application:</p>
<p>5     name: eureka-client</p>
<p>6 eureka:</p>
<p>7   client:</p>
<p>8     service-url:  # 这边就保证了注册到 eureka-service 这个注册中心去</p>
<p>9       defaultZone: http://localhost:1000/eureka/ </p>
<p><code></code>`</p><p><code>spring.application.name</code>属性，指定了微服务的名称，在调用的时候可以通过该名称进行服务访问。<code>eureka.client.serviceUrl.defaultZone</code>属性对应服务注册中心的配置内容，指定服务注册中心的位置。</p><p>大家看到，这边端口设置为1001，那是因为要在本机上测试 服务提供方 和 服务注册中心，所以<code>server的port</code>属性需设置不同的端口。</p><p>最后，我们再写一个接口，通过DiscoveryClient对象，在客户端中获取注册中心的所有服务信息。</p><p><code></code>`java</p>
<p> 1 @Controller</p>
<p> 2 @RequestMapping("/eurekacenter")</p>
<p> 3 public class EuServiceController {</p>
<p> 4 </p>
<p> 5     @Autowired</p>
<p> 6     DiscoveryClient discoveryClient;</p>
<p> 7 </p>
<p> 8     /<em></em></p>
<p> 9      * 获取注册服务信息</p>
<p>10      */</p>
<p>11     @RequestMapping(value = "/service", method = {RequestMethod.GET})</p>
<p>12     @ResponseBody</p>
<p>13     public String getServiceInfo() {</p>
<p>14        return  "service:"+discoveryClient.getServices()+" , memo:"+discoveryClient.description();</p>
<p>15     }</p>
<p>16 } </p>
<p><code></code>`</p><p>这时候跑一下试试看，继续访问之前的地址：[http://localhost:1000/](http://localhost:1000/) ，可以看到Eureka注册中心页面已经包含一个我们定义的服务了，就是上面新建的 1001 端口的服务。</p><img src="/images/books/image_7_1_1.png" alt="" /><p>同样，我们可以调用上面的那个获取注册服务信息的接口，从服务发现的角度看看有多少个服务被注册到注册中心去。 [http://localhost:1001/eurekacenter/service](http://localhost:1001/eurekacenter/service)</p><img src="/images/books/image_30.png" alt="" /><p>如上图所示，方括号中的<code>eureka-client</code>通过Spring Cloud定义的 getServiceInfo 接口在eureka的实现中获取到的所有服务清单，他是一个String的List，如果注册了多个提供者，就会全部显示。</p><h3>2.2 Spring Cloud Consul <a href="#scroller-6" id="scroller-6"></a></h3></p><p>Consul 用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案，Consul 的方案更具“一站式”特征，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具（比如 ZooKeeper 之类的）。</p><p>而Spring Cloud Consul ，是将其作为一个整体，在微服务架构中为我们的基础设施提供服务发现和服务配置的工具。</p><p><h4>2.2.1 Consul 的优势 <a href="#scroller-7" id="scroller-7"></a></h4></p><p>1、使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接。</p><p>2、支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等。 zookeeper 和 etcd 均不提供多数据中心功能的支持，上面表格中有体现。</p><p>3、支持健康检查。</p><p>4、支持 http 和 dns 协议接口。 zookeeper 的集成较为复杂, etcd 只支持 http 协议。</p><p>5、官方提供 web 管理界面, etcd 无此功能。</p><p><h4>2.2.2 Consul的特性 <a href="#scroller-8" id="scroller-8"></a></h4></p><p>1、服务发现</p><p>2、健康检查</p><p>3、Key/Value存储</p><p>4、多数据中心</p><p><h4>2.2.3 安装Consul注册中心 <a href="#scroller-9" id="scroller-9"></a></h4><p>1、官方下载64版本 ：[https://www.consul.io/downloads.html](https://www.consul.io/downloads.html)</p><p>2、解压后复制到目录 /usr/local/bin 下</p><p>3、启动终端，先看下啥版本的</p><p><code></code>`sh</p>
<p>1 liyifei@MacPro ~ % consul --version</p>
<p>2 Consul v1.10.4</p>
<p>3 Revision 7bbad6fe</p>
<p>4 Protocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol >2 when speaking to compatible agents) </p>
<p><code></code>`</p><p>4、执行安装命令，可以看到他的 Client Addr 的端口为8500。所以访问 8500端口站点，[http://127.0.0.1:8500/ui/dc1/services](http://127.0.0.1:8500/ui/dc1/services)</p><p><code></code>`sh</p>
<p> 1 liyifei@MacPro ~ % consul agent -dev</p>
<p> 2 ==> Starting Consul agent...</p>
<p> 3            Version: '1.10.4'</p>
<p> 4            Node ID: '6db154b4-62ff-e67d-e745-1a7270fa1ce8'</p>
<p> 5          Node name: 'B000000147796DS'</p>
<p> 6         Datacenter: 'dc1' (Segment: '<all>')</p>
<p> 7             Server: true (Bootstrap: false)</p>
<p> 8        Client Addr: [127.0.0.1] (HTTP: 8500, HTTPS: -1, gRPC: 8502, DNS: 8600)</p>
<p> 9       Cluster Addr: 127.0.0.1 (LAN: 8301, WAN: 8302)</p>
<p>10            Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: false, Auto-Encrypt-TLS: false </p>
<p><code></code>`</p><img src="/images/books/image_12_1.png" alt="" /><p>我们可以看到，现在没有客户端注册上来，只有一个自身的实例。</p><h4>2.2.4 创建服务提供者 <a href="#scroller-10" id="scroller-10"></a></h4><p>由于Spring Cloud Consul项目的实现，我们可以轻松的将基于Spring Boot的微服务应用注册到Consul上，并通过此实现微服务架构中的服务治理。</p><p>我们在micro-service-center下新建一个cloud项目consul-client，该项目pom文件添加如下：</p><p><code></code>`xml</p>
<p> 1 <!--    在子工程中添加父工程名称--></p>
<p> 2 <parent></p>
<p> 3     <groupId>com.microservice</groupId></p>
<p> 4     <artifactId>center</artifactId></p>
<p> 5     <version>1.0.0</version></p>
<p> 6 </parent></p>
<p> 7 </p>
<p> 8 <dependencies></p>
<p> 9 <!--        Consul服务发现--></p>
<p>10 <dependency></p>
<p>11     <groupId>org.springframework.cloud</groupId></p>
<p>12     <artifactId>spring-cloud-starter-consul-discovery</artifactId></p>
<p>13 </dependency></p>
<p>14 <!--        Consul健康检查--></p>
<p>15 <dependency></p>
<p>16     <groupId>org.springframework.boot</groupId></p>
<p>17     <artifactId>spring-boot-starter-actuator</artifactId></p>
<p>18 </dependency></p>
<p>19 </dependencies></p>
<p><code></code>`</p><p>然后修改一下<code>application.yml的配置信息</code>，将consul配置写入，注释应该很清楚了，如下：</p><p><code></code>`yaml</p>
<p>1 spring:</p>
<p>2   application:</p>
<p>3     name: consul-producer # 当前服务的名称</p>
<p>4   cloud:</p>
<p>5     consul: # 以下为Consuk注册中心的地址，如果安装的不是这个host和port，这边可以调整</p>
<p>6       host: localhost</p>
<p>7       port: 8500</p>
<p>8 server:</p>
<p>9   port: 8501 # 当前服务的端口</p>
<p><code></code>`</p><p>同样的，我们要在应用主类Application文件中通过加上<code>@EnableDiscoveryClient</code>注解，该注解保证当前服务被Consul当成provider发现。</p><p>大家看到这个做法跟Eureka一样，因为Spring Cloud对服务治理做的一层抽象，所以可以屏蔽Eureka和Consul服务治理的实现细节，</p><p>程序上不需要做改变，只需要引入不同的服务治理依赖，并配置相关的配置属性 就能轻松的将微服务纳入Spring Cloud的各个服务治理框架中。</p><p><code></code>`java</p>
<p>1 @SpringBootApplication</p>
<p>2 @EnableDiscoveryClient</p>
<p>3 public class ConsulClientApplication {</p>
<p>4     public static void main(String[] args) {</p>
<p>5         SpringApplication.run(ClientApplication.class, args);</p>
<p>6     }</p>
<p>7 } </p>
<p><code></code>`</p><p>修改完成之后，我们就可以把这个服务提供者启动了，然后再去注册中心查看服务的注册情况，就可以看到被注册进来的Provider（consul-producer）：</p><img src="/images/books/image_6_1_1.png" alt="" /><h2>3 总结 <a href="#scroller-11" id="scroller-11"></a></h2><p>除了 Eureka、Consul，还有其他的的注册中心技术，如Zookeeper、Nocas等。但无论何种注册中心技术，本质上都是为了解决微服务中的如下问题：</p><strong>解耦服务之间相互依赖的细节</strong></p><p>我们知道服务之间的远程调用必须要知道对方的IP、端口信息。我们可以在调用方直接配置被调用方的IP、端口，这种调用方直接依赖IP、端口的方式存在明显的问题，如被调用的IP、端口变化后，调用方法也要同步修改。</p><p>通过服务发现，将服务之间IP与端口的依赖转化为服务名的依赖，服务名可以根据具微服务业务来做标识，因此，屏蔽、解耦服务之间的依赖细节是服务发现与注册解决的第一个问题。</p><p><strong>对微服务进行动态管理</strong><p>在微服务架构中，服务众多，服务之间的相互依赖也错综复杂，无论是服务主动停止，意外挂掉，还是因为流量增加对服务实现进行扩容，这些服务数据或状态上的动态变化，都需要尽快的通知到被调用方，被调用方才采取相应的措施。因此，对于服务注册与发现要实时管理者服务的数据与状态，包括服务的注册上线、服务主动下线，异常服务的剔除。</p>
6:["$","article",null,{"className":"py-24 sm:py-32","children":["$","div",null,{"className":"mx-auto max-w-3xl px-6 lg:px-8","children":["$","div",null,{"className":"xl:relative","children":["$","div",null,{"className":"mx-auto max-w-2xl","children":[["$","div",null,{"className":"text-center","children":[["$","time",null,{"dateTime":"2024-04-02","className":"text-gray-500","children":"2024年04月02日"}],["$","h1",null,{"className":"mt-6 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl","children":"服务注册与发现（实践篇）"}],["$","p",null,{"className":"mt-6 text-lg leading-8 text-gray-600","children":"前面我们对业内几种比较常见的注册中心做了介绍：Eureka、Zookeeper、Consul、Etcd。 并且在各个指标上做了对比：注册方式（watch/polling）、健康检查、雪崩保护、安全与权限，以及在Spring Cloud、Dubbo、Kubernets上的支持程度。方便我们在不同的场景..."}],["$","div",null,{"className":"mt-6 flex justify-center gap-2","children":[["$","$L5","微服务",{"href":"/blog/tag/%E5%BE%AE%E6%9C%8D%E5%8A%A1/page/1","className":"rounded-full bg-gray-100 px-3 py-1 text-sm font-medium text-gray-700 hover:bg-gray-200","children":"微服务"}]]}]]}],["$","div",null,{"className":"mt-16 prose prose-lg prose-gray mx-auto","children":["$","div",null,{"className":"prose prose-lg prose-gray mx-auto","dangerouslySetInnerHTML":{"__html":"$14"}}]}],["$","div",null,{"className":"mt-16 flex items-center justify-between border-t border-gray-200 pt-8","children":["$","$L5",null,{"href":"/blog","className":"relative z-10 rounded-md px-4 py-2 text-sm font-semibold leading-6 text-gray-900 hover:text-blue-600 hover:bg-gray-50","children":"← 返回博客列表"}]}],["$","div",null,{"className":"mt-8 grid grid-cols-1 gap-8 border-t border-gray-200 pt-8 lg:grid-cols-2","children":[["$","div",null,{"className":"group","children":[["$","div",null,{"className":"flex items-center gap-x-3","children":["$","div",null,{"className":"text-sm text-gray-500","children":"上一篇"}]}],["$","h3",null,{"className":"mt-2 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600","children":["$","$L5",null,{"href":"/blog/fu-wu-zhu-ce-yu-fa-xian","children":[["$","span",null,{"className":"absolute inset-0"}],"服务注册与发现"]}]}],["$","p",null,{"className":"mt-3 text-sm leading-6 text-gray-600 line-clamp-2","children":"我们前面在全景架构中对服务注册与发现做了大致的说明，本章我们着重详细说明微服务下注册与发现的这个能力。微服务注册与发现类似于生活中的电话通讯录的概念，它记录了通讯录服务和电话的映射关系。"}]]}],["$","div",null,{"className":"group","children":[["$","div",null,{"className":"flex items-center gap-x-3","children":["$","div",null,{"className":"text-sm text-gray-500","children":"下一篇"}]}],["$","h3",null,{"className":"mt-2 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600","children":["$","$L5",null,{"href":"/blog/maven-shi-yong-ji-qiao","children":[["$","span",null,{"className":"absolute inset-0"}],"Maven使用技巧"]}]}],["$","p",null,{"className":"mt-3 text-sm leading-6 text-gray-600 line-clamp-2","children":"--- description: Maven ---..."}]]}]]}]]}]}]}]}]
9:null
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
b:{"metadata":[["$","title","0",{"children":"Skyfalling"}],["$","meta","1",{"name":"description","content":"分享技术、生活和思考的个人博客"}],["$","link","2",{"rel":"icon","href":"/favicon.svg"}]],"error":null,"digest":"$undefined"}
13:{"metadata":"$b:metadata","error":null,"digest":"$undefined"}
