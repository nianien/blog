1:"$Sreact.fragment"
2:I[5651,["874","static/chunks/874-80549eca86098588.js","177","static/chunks/app/layout-32556b88729833ce.js"],"default"]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[6874,["874","static/chunks/874-80549eca86098588.js","909","static/chunks/app/blog/%5B...slug%5D/page-b420037c820534af.js"],""]
7:I[9665,[],"OutletBoundary"]
a:I[4911,[],"AsyncMetadataOutlet"]
c:I[9665,[],"ViewportBoundary"]
e:I[9665,[],"MetadataBoundary"]
10:I[6614,[],""]
:HL["/blog/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/blog/_next/static/css/b383bfdf312065bd.css","style"]
0:{"P":null,"b":"Kw2pFI3i7zWLe0FOWC9Np","p":"/blog","c":["","blog","java-gou-jian-fa-bu-dao-zhong-yang-cang-ku",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","java-gou-jian-fa-bu-dao-zhong-yang-cang-ku","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/blog/_next/static/css/b383bfdf312065bd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"zh-CN","children":["$","body",null,{"className":"__className_067971","children":["$","div",null,{"className":"min-h-screen flex flex-col","children":[["$","$L2",null,{}],["$","main",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-gray-900","children":["$","div",null,{"className":"mx-auto max-w-7xl px-6 py-12 md:flex md:items-center md:justify-between lg:px-8","children":[["$","div",null,{"className":"flex justify-center space-x-6 md:order-2","children":[["$","$L5",null,{"href":"/about","className":"text-gray-400 hover:text-gray-300","children":"关于"}],["$","$L5",null,{"href":"/blog","className":"text-gray-400 hover:text-gray-300","children":"博客"}],["$","$L5",null,{"href":"/contact","className":"text-gray-400 hover:text-gray-300","children":"联系"}]]}],["$","div",null,{"className":"mt-8 md:order-1 md:mt-0","children":["$","p",null,{"className":"text-center text-xs leading-5 text-gray-400","children":"© 2024 Skyfalling Blog. All rights reserved."}]}]]}]}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","java-gou-jian-fa-bu-dao-zhong-yang-cang-ku","c"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","v_Rlrnro7e9DEopw_7xRIv",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$Le",null,{"children":"$Lf"}]]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
11:"$Sreact.suspense"
12:I[4911,[],"AsyncMetadata"]
f:["$","div",null,{"hidden":true,"children":["$","$11",null,{"fallback":null,"children":["$","$L12",null,{"promise":"$@13"}]}]}]
14:T39e9,
<h1>Java构件发布到中央仓库</h1><p>_首先强调一下，Maven中央仓库并不支持直接发布jar包。我们需要将jar包发布到一些指定的第三方Maven仓库，然后该仓库再将jar包同步到Maven中央仓库。其中，最”简单”的方式是通过_[Sonatype OSSRH](https://central.sonatype.org/pages/ossrh-guide.html)_仓库来发布jar包。所以，接下来主要介绍如何将jar包发布到Sonatype OSSRH。_</p><p>首先，先说一下大体的步骤：</p><p>* 注册Sonatype账号</p>
<p>* 创建Issue，验证域名</p>
<p>* 安装GPG，发布密钥</p>
<p>* 配置Maven，发布构件</p><p>这里面比较重要和容易出错的是第二步和第三步，下面一一详细介绍。</p><h4>1、注册Sonatype账号 <a href="#bojci" id="bojci"></a></h4></p><p>第一步很简单，登录官网，注册账号就好了[Sign up for Jira - Sonatype JIRA](https://issues.sonatype.org/secure/Signup!default.jspa)</p><p>注册完成，登陆后的界面如下：</p><img src="/images/books/image_60.png" alt="" /><p><h4>2、创建Issue <a href="#omwqz" id="omwqz"></a></h4></p><p>这里项目选择：Community Support - Open Source Project Repository Hosting (OSSRH)，问题 类型选择：New Project</p><img src="/images/books/image_67.png" alt="" /><p><h4>2.1、补充项目信息</h4></p><img src="/images/books/image_62.png" alt="" /><p><h4>2.2、验证域名 <a href="#snbg0" id="snbg0"></a></h4><p>我们需要使用域名作为Group Id，如果你拥有域&#x540D;_&#x65;xample.com，则能够使用com.example开头作为Group Id，例如：com.example.myproject。其他一些栗子如下：_</p><p>* _example.com -> com.example.domain_</p>
<p>* [www.springframework.org](http://www.springframework.org/) -> org.springframework</p>
<p>* subdomain.example.com -> example.com</p>
<p>* github.com/yourusername -> io.github.yourusername</p>
<p>* my-domain.com -> com.my-domain</p><p>要想使用某个域名作为Group Id，你需要证明拥有该域名，至于如何证明，详见官方文档：[https://central.sonatype.org/faq/how-to-set-txt-record/](https://central.sonatype.org/faq/how-to-set-txt-record)</p><p>如果你没有自己的域名，则可以通过代码托管平台的账号关联子域名。假设你托管平台账户名为myusername，那么你可以通过以下托管平台验证Group Id ：</p><img src="/images/books/image_63.png" alt="" /><p>由于我没有自己的域名，这里我选择使用github账号验证Group Id。点击“新建”按钮，完成提交，之后你的注册邮箱会收到一封邮件，显示创建项目信息：</p><img src="/images/books/image_65.png" alt="" /><p>稍后还会收到一封审核邮件，提示你进行域名验证，时间延迟大概在十分钟以内。</p><strong>2.3、人工审核及确认</strong><img src="/images/books/image_66.png" alt="" /><p>我使用的是github账户，按邮件提示，需要在github平台上创建一个指定的临时工程。创建完成之后，可以在issue下面添加评论，触发验证。验证成功后，你会收到一份邮件：</p><img src="/images/books/image_68.png" alt="" /><p>收到上述邮件，就表示完成了Group Id的验证，此时你就可以使用该Group Id或者子Group Id发布Maven构件了。如上，我填写的Group Id是 “io.github.nianien”，因此，我可以使用 “io.github.nianien”或者 “io.github.nianien.xxx” 作为项目的GroupId发布Maven构件。</p><p>在通过Maven发布构件之前，我们需要进行Maven配置，这里还需要一些前置工作。</p><h4>3、安装GPG，创建密钥 <a href="#dcxco" id="dcxco"></a></h4></p><p>安装GPG的方式有多种，这里推荐图形化安装，因为通过命令行安装，由于找不到合适的密钥服务器，发布密钥时会失败。这里给出Mac版本的下载地址：[https://releases.gpgtools.org/GPG\_Suite-2022.1.dmg](https://releases.gpgtools.org/GPG_Suite-2022.1.dmg)</p><p>* 创建密钥</p><img src="/images/books/image_69.png" alt="" /><p>3.1、发布密钥</p><img src="/images/books/image_70.png" alt="" /><p>发布成功后，收到一份邮件：</p><img src="/images/books/image_71.png" alt="" /><p>按照邮件指示操作，完成密钥发布。密钥发布成功之后，下一步就是配置maven settings.xml和工程pom.xml文件。</p><p><h4>4、配置Maven，发布构件 <a href="#amad1" id="amad1"></a></h4><p>* 第一步，配置setting.xml文件，添加server节点：</p><p>{% code fullWidth="false" %}</p>
<p><code></code>`xml</p>
<p><servers></p>
<p><server></p>
<p>    <id>ossrh</id></p>
<p>    <username>sonatype账户名</username></p>
<p>    <password>sonatype账户密码</password></p>
<p></server></p>
<p></servers></p>
<p><profile></p>
<p>  <id>ossrh</id></p>
<p>  <properties></p>
<p>    <gpg.executable>gpg</gpg.executable></p>
<p>    <gpg.passphrase>创建密钥时使用的密码</gpg.passphrase></p>
<p>    <gpg.homedir>/Users/yourname/.gnupg</gpg.homedir></p>
<p>   </properties></p>
<p></profile></p>
<p><code></code>`</p>
<p>{% endcode %}</p><p>* 第二步，配置pom.xml文件，添加必填项</p><p>{% code fullWidth="false" %}</p>
<p><code></code>`xml</p>
<p><?xml version="1.0" encoding="UTF-8"?></p>
<p><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</p>
<p>         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"></p>
<p>    <modelVersion>4.0.0</modelVersion><!--已经验证的Group Id--></p>
<p>    <groupId>io.github.nianien</groupId></p>
<p>    <artifactId>cudrania</artifactId></p>
<p>    <version>1.0.1</version><!--必填--></p>
<p>    <name>io.github.nianien:cudrania</name><!--必填--></p>
<p>    <description>support tools for java development</description><!--必填--></p>
<p>    <url>https://github.com/nianien/cudrania</url></p>
<p>    <properties></p>
<p>        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding></p>
<p>        <java.version>17</java.version></p>
<p>    </properties><!--必填--></p>
<p>    <licenses></p>
<p>        <license></p>
<p>            <name>The Apache Software License, Version 2.0</name></p>
<p>            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url></p>
<p>        </license></p>
<p>    </licenses><!--必填--></p>
<p>    <developers></p>
<p>        <developer></p>
<p>            <id>nianien</id></p>
<p>            <name>nianien</name></p>
<p>            <email>nianien@126.com</email></p>
<p>        </developer></p>
<p>    </developers><!--必填--></p>
<p>    <scm></p>
<p>        <connection>https://github.com/nianien/cudrania.git</connection></p>
<p>        <developerConnection>scm:git:ssh://git@github.com:nianien/cudrania.git</p>
<p>        </developerConnection></p>
<p>        <url>https://github.com/nianien/cudrania</url></p>
<p>    </scm></p>
<p>    <build></p>
<p>        <pluginManagement></p>
<p>            <plugins></p>
<p>                <plugin></p>
<p>                    <groupId>org.apache.maven.plugins</groupId></p>
<p>                    <artifactId>maven-compiler-plugin</artifactId></p>
<p>                    <version>3.11.0</version></p>
<p>                    <configuration></p>
<p>                        <source>${java.version}</source></p>
<p>                        <target>${java.version}</target></p>
<p>                    </configuration></p>
<p>                </plugin></p>
<p>                <plugin><!--必填-->﻿</p>
<p>                    <groupId>org.apache.maven.plugins</groupId></p>
<p>                    <artifactId>maven-source-plugin</artifactId></p>
<p>                    <version>3.3.0</version></p>
<p>                    <executions></p>
<p>                        <execution></p>
<p>                            <id>attach-sources</id></p>
<p>                            <goals></p>
<p>                                <goal>jar-no-fork</goal></p>
<p>                            </goals></p>
<p>                        </execution></p>
<p>                    </executions></p>
<p>                </plugin></p>
<p>                <plugin><!--必填--> ﻿</p>
<p>                    <groupId>org.apache.maven.plugins</groupId></p>
<p>                    <artifactId>maven-javadoc-plugin</artifactId></p>
<p>                    <version>3.5.0</version></p>
<p>                    <executions></p>
<p>                        <execution></p>
<p>                            <id>attach-javadocs</id></p>
<p>                            <goals></p>
<p>                                <goal>jar</goal></p>
<p>                            </goals></p>
<p>                            <configuration></p>
<p>                                <additionalparam></p>
<p>                                    -Xdoclint:none</p>
<p>                                </additionalparam></p>
<p>                            </configuration></p>
<p>                        </execution></p>
<p>                    </executions></p>
<p>                </plugin><!--必填--></p>
<p>                ﻿</p>
<p>                <plugin></p>
<p>                    <groupId>org.apache.maven.plugins</groupId></p>
<p>                    <artifactId>maven-gpg-plugin</artifactId></p>
<p>                    <version>3.1.0</version></p>
<p>                    <executions></p>
<p>                        <execution></p>
<p>                            <id>sign-artifacts</id></p>
<p>                            <phase>verify</phase></p>
<p>                            <goals></p>
<p>                                <goal>sign</goal></p>
<p>                            </goals></p>
<p>                        </execution></p>
<p>                    </executions></p>
<p>                </plugin></p>
<p>            </plugins></p>
<p>        </pluginManagement></p>
<p>        <plugins></p>
<p>            <plugin></p>
<p>                <groupId>org.apache.maven.plugins</groupId></p>
<p>                <artifactId>maven-compiler-plugin</artifactId></p>
<p>            </plugin></p>
<p>            <plugin></p>
<p>                <groupId>org.apache.maven.plugins</groupId></p>
<p>                <artifactId>maven-source-plugin</artifactId></p>
<p>            </plugin></p>
<p>            <plugin></p>
<p>                <groupId>org.apache.maven.plugins</groupId></p>
<p>                <artifactId>maven-javadoc-plugin</artifactId></p>
<p>            </plugin></p>
<p>        </plugins></p>
<p>    </build></p><p>    <profiles><!--必填--></p>
<p>        <profile></p>
<p>            <id>ossrh</id></p>
<p>            <build></p>
<p>                <plugins></p>
<p>                    <plugin><!--必填--></p>
<p>                        <groupId>org.sonatype.plugins</groupId></p>
<p>                        <artifactId>nexus-staging-maven-plugin</artifactId></p>
<p>                        <version>1.6.13</version></p>
<p>                        <extensions>true</extensions></p>
<p>                        <configuration></p>
<p>                            <serverId>ossrh</serverId></p>
<p>                            <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl> </p>
<p>                          <autoReleaseAfterClose>true</autoReleaseAfterClose></p>
<p>                        </configuration></p>
<p>                    </plugin></p>
<p>                    <plugin><!--必填--></p>
<p>                        <groupId>org.apache.maven.plugins</groupId></p>
<p>                        <artifactId>maven-gpg-plugin</artifactId></p>
<p>                    </plugin></p>
<p>                </plugins></p>
<p>            </build><!--必填--></p>
<p>            <distributionManagement></p>
<p>                <snapshotRepository></p>
<p>                    <id>ossrh</id></p>
<p>                  <url>https://s01.oss.sonatype.org/content/repositories/snapshots</p>
<p>                    </url></p>
<p>                </snapshotRepository></p>
<p>                <repository></p>
<p>                    <id>ossrh</id></p>
<p>                    <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</p>
<p>                    </url></p>
<p>                </repository></p>
<p>            </distributionManagement></p>
<p>        </profile></p>
<p>    </profiles></p><p>    <dependencies><!--maven依赖--></dependencies></p><p></project></p>
<p><code></code>`</p>
<p>{% endcode %}</p><p>上面已经是最精简的pom配置了，我已经把必选项标注好了。这里主要包含两部分内容，一部分是snoatype要求的必备信息，包括：证书、开发者信息、仓库地址和发布地址；另一部分是deploy需要的maven插件列表，大家可以根据实际情况酌情修改。</p><p>需要说明的是，为了不用默认打包冲突，专门定义了用于发布中央仓库的profile：ossrh，这里只需要添加额外的两个插件：nexus-staging-maven-plugin和maven-gpg-plugin，前者用于jar上传，后者用于密钥签名。</p><p>* 第三步，执行maven命令，发布构件</p><p>配置好pom文件，可以执行maven命令：“mvn clean deploy -Possrh” 进行发布。如果版本号带SNAPSHOT后缀，会发布到snapshots仓库，否则发布到release仓库。</p><p>这里nexus-staging-maven-plugin插件有一个配置项：autoReleaseAfterClose，如果设置为true的话，推送完成会自动release。第一次发布成功后，会收到一封邮件：</p><img src="/images/books/image_72.png" alt="" /><p>* _<strong>最后，让jar包更快的在中央仓库被搜索到</strong>_</p><p>根据邮件提示，Jar包成功发布成功后，大约30分钟后会推到中央仓库，我们可以从仓库地址看到我们发布的Jar包：[https://repo1.maven.org/maven2/](https://repo1.maven.org/maven2)</p><img src="/images/books/image_73.png" alt="" /><p>此时，其他项目就可以通过maven依赖引用我们的构件了，但是这时候通过中央仓库仍然搜不到我们的Maven构件。按照邮件提示可能会需要四小时，实际情况是我等了5个小时依然搜不到。如果遇到这种情况，我们可以通过在对issue添加评论反馈，会有人工回复进行解决：</p><img src="/images/books/image_74.png" alt="" /><p>另外，关于mvnrepository与Maven Central的关系，有人咨询，官方也做了解答：</p><img src="/images/books/image_75.png" alt="" /><p>根据我的实际经验判断，mvnrepository应该是定时同步的，我发布成功后，第二天才能搜到：</p><img src="/images/books/image_76.png" alt="" /><p>下面是官方指导文档，介绍非常详细，基本上不用在网上搜索其他教程了。</p><h4>官方参考文档 <a href="#dzquo" id="dzquo"></a></h4><p>[https://central.sonatype.org/publish/publish-guide/](https://central.sonatype.org/publish/publish-guide)</p>
6:["$","article",null,{"className":"py-24 sm:py-32","children":["$","div",null,{"className":"mx-auto max-w-3xl px-6 lg:px-8","children":["$","div",null,{"className":"xl:relative","children":["$","div",null,{"className":"mx-auto max-w-2xl","children":[["$","div",null,{"className":"text-center","children":[["$","time",null,{"dateTime":"2024-04-04","className":"text-gray-500","children":"2024年04月04日"}],["$","h1",null,{"className":"mt-6 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl","children":"Java构件发布到中央仓库"}],["$","p",null,{"className":"mt-6 text-lg leading-8 text-gray-600","children":"_首先强调一下，Maven中央仓库并不支持直接发布jar包。我们需要将jar包发布到一些指定的第三方Maven仓库，然后该仓库再将jar包同步到Maven中央仓库。其中，最”简单”的方式是通过_[Sonatype OSSRH](https://central.sonatype.org/pages/o..."}],["$","div",null,{"className":"mt-6 flex justify-center gap-2","children":[["$","$L5","技术实战",{"href":"/blog/tag/%E6%8A%80%E6%9C%AF%E5%AE%9E%E6%88%98/page/1","className":"rounded-full bg-gray-100 px-3 py-1 text-sm font-medium text-gray-700 hover:bg-gray-200","children":"技术实战"}]]}]]}],["$","div",null,{"className":"mt-16 prose prose-lg prose-gray mx-auto","children":["$","div",null,{"className":"prose prose-lg prose-gray mx-auto","dangerouslySetInnerHTML":{"__html":"$14"}}]}],["$","div",null,{"className":"mt-16 flex items-center justify-between border-t border-gray-200 pt-8","children":["$","$L5",null,{"href":"/blog","className":"relative z-10 rounded-md px-4 py-2 text-sm font-semibold leading-6 text-gray-900 hover:text-blue-600 hover:bg-gray-50","children":"← 返回博客列表"}]}],["$","div",null,{"className":"mt-8 grid grid-cols-1 gap-8 border-t border-gray-200 pt-8 lg:grid-cols-2","children":[["$","div",null,{"className":"group","children":[["$","div",null,{"className":"flex items-center gap-x-3","children":["$","div",null,{"className":"text-sm text-gray-500","children":"上一篇"}]}],["$","h3",null,{"className":"mt-2 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600","children":["$","$L5",null,{"href":"/blog/maven-shi-yong-ji-qiao","children":[["$","span",null,{"className":"absolute inset-0"}],"Maven使用技巧"]}]}],["$","p",null,{"className":"mt-3 text-sm leading-6 text-gray-600 line-clamp-2","children":"--- description: Maven ---..."}]]}],["$","div",null,{"className":"group","children":[["$","div",null,{"className":"flex items-center gap-x-3","children":["$","div",null,{"className":"text-sm text-gray-500","children":"下一篇"}]}],["$","h3",null,{"className":"mt-2 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600","children":["$","$L5",null,{"href":"/blog/git-chang-yong-ming-ling","children":[["$","span",null,{"className":"absolute inset-0"}],"Git常用命令"]}]}],["$","p",null,{"className":"mt-3 text-sm leading-6 text-gray-600 line-clamp-2","children":"git 不再追踪文件改动 git update-index --assume-unchanged filePath git 恢复追踪文件改动 git update-index --no-assume-unchanged filePath git 删除被管理的文件 git rm --cached fi..."}]]}]]}]]}]}]}]}]
9:null
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
b:{"metadata":[["$","title","0",{"children":"Skyfalling"}],["$","meta","1",{"name":"description","content":"分享技术、生活和思考的个人博客"}],["$","link","2",{"rel":"icon","href":"/favicon.svg"}]],"error":null,"digest":"$undefined"}
13:{"metadata":"$b:metadata","error":null,"digest":"$undefined"}
